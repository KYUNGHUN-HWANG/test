/** ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**
**     @file      lin_cfg.h
**
**     @date      ¿ÀÈÄ 5:24:54, 2025. 5. 15
**
**     @brief     Hardware configuration file
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016 - 2017 NXP
**     All Rights Reserved.
**
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/

/*!
 * @file lin_cfg.h
 *
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.3, A project should not contain unused type declarations.
 * The type can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, A project should not contain unused macro declarations.
 * The macro can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.1, External identifiers shall be distinct.
 * The identifiers are generated from signal names. The signal name is defined by users and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.2, Identifiers declared in the same scope and name
 * space shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.4, Macro identifiers shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.5, Identifier shall be distinct from macro names.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Directive 4.9, A function should be used in preference
 * to a function-like macro where they are interchangeable.
 * The macro is used to define static or dynamic implementation of API functions.
 * This way is more efficient.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 20.10, The #/ ## preprocessor operator should not be used.
 * The operator is used to define dynamic implementation of API functions of signal interaction.
 * This way is more efficient.
 */
#ifndef    LIN_CFG_H
#define    LIN_CFG_H

#include <stdint.h>
#include "lin_driver.h"
#include "lin1.h"
#include "lin2.h"
#include "lin3.h"

/* Implements    : SUPPORT_MASTER_MODE_Class */
#define SUPPORT_MASTER_MODE     1U /* Equal to 1 when have at least one master interface */
/* Implements    : SUPPORT_SLAVE_MODE_Class */
#define SUPPORT_SLAVE_MODE      0U  /* Equal to 1 when have at least one slave interface */

/* Implements    : SUPPORT_PROTOCOL_21_Class */
#define SUPPORT_PROTOCOL_21     1U /* Equal to 1 when have at least one LIN2.1 or LIN2.2 interface */
/* Implements    : SUPPORT_PROTOCOL_20_Class */
#define SUPPORT_PROTOCOL_20     0U /* Equal to 1 when have at least one LIN2.0 interface */
/* Implements    : SUPPORT_PROTOCOL_J2602_Class */
#define SUPPORT_PROTOCOL_J2602  0U /* Equal to 1 when have at least one J2602 interface */
/* Implements    : SUPPORT_PROTOCOL_13_Class */
#define SUPPORT_PROTOCOL_13     0U /* Equal to 1 when have at least one LIN1.3 interface */

/* Implements    : SUPPORT_DIAG_CLASS_III_Class */
#define SUPPORT_DIAG_CLASS_III  0U /* Equal to 1 when have at least one ifc with diagnostic class III */
/* Implements    : SUPPORT_DIAG_CLASS_II_Class */
#define SUPPORT_DIAG_CLASS_II   0U /* Equal to 1 when have at least one ifc with diagnostic class II or III */

/* Implements    : SUPPORT_TRANSPORT_LAYER_Class */
#define SUPPORT_TRANSPORT_LAYER 0U /* Equal to 1 to use transport layer */
/* Implements    : SUPPORT_DIAG_SERVICE_Class */
#define SUPPORT_DIAG_SERVICE    0U /* Equal to 1 to use diagnostic service layer */
#define TIME_OUT_UNIT_US 500U

#define HARDWARE_INSTANCE_COUNT    3U

#define LIN_NUM_OF_IFCS  3U
#define LIN_NUM_OF_SLAVE_IFCS 0U
#define LIN_NUM_OF_MASTER_IFCS 3U

/* frame buffer size */
#define LIN_FRAME_BUF_SIZE          78U
#define LIN_FLAG_BUF_SIZE           45U

/**********************************************************************/
/***************               Interfaces           *******************/
/**********************************************************************/
typedef enum {
   LI0 = 0x00U,
   LI1 = 0x01U,
   LI2 = 0x02U,
   INVALID_IFC = 0xFFU
}l_ifc_handle;

typedef enum {
   INVALID_SLAVE_INDEX = 0xFFU
}l_ifc_slave_handle;
typedef enum {
   LI0_Master = 0x00U,
   LI1_Master = 0x01U,
   LI2_Master = 0x02U,
   INVALID_MASTER_INDEX = 0xFFU
}l_ifc_master_handle;

/**********************************************************************/
/***************               Signals              *******************/
/**********************************************************************/
/* Number of signals */
#define LIN_NUM_OF_SIGS  229U
/* List of signals */
typedef enum {

   /* Interface_name = LI0 */

   LI0_EVNT_ADDr

   , LI0_EVNT_Broad
  
   , LI0_EVNT_SPEED
  
   , LI0_EVNT_CMD
  
   , LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition
  
   , LI0_EVNT_Front_Side_LH_UpDown_TargetPosition
  
   , LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition
  
   , LI0_EVNT_Front_Center_LH_UpDown_TargetPosition
  
   , LI0_FR_SLLR_SPEED
  
   , LI0_FR_SLLR_OpDone
  
   , LI0_FR_SLLR_STATE
  
   , LI0_FR_SLLR_ActuatorState
  
   , LI0_FR_SLLR_VddReset
  
   , LI0_FR_SLLR_Steploss
  
   , LI0_FR_SLLR_EIDef
  
   , LI0_FR_SLLR_TSD
  
   , LI0_FR_SLLR_TW
  
   , LI0_FR_SLLR_Tinfo
  
   , LI0_FR_SLLR_Sensor
  
   , LI0_FR_SLLR_OV
  
   , LI0_FR_SLLR_UV
  
   , LI0_FR_SLLR_OPEN2
  
   , LI0_FR_SLLR_OPEN1
  
   , LI0_FR_SLLR_OVC2
  
   , LI0_FR_SLLR_OVC1
  
   , LI0_FR_CLLR_SPEED
  
   , LI0_FR_CLLR_OpDone
  
   , LI0_FR_CLLR_STATE
  
   , LI0_FR_CLLR_ActuatorState
  
   , LI0_FR_CLLR_VddReset
  
   , LI0_FR_CLLR_Steploss
  
   , LI0_FR_CLLR_EIDef
  
   , LI0_FR_CLLR_TSD
  
   , LI0_FR_CLLR_TW
  
   , LI0_FR_CLLR_Tinfo
  
   , LI0_FR_CLLR_Sensor
  
   , LI0_FR_CLLR_OV
  
   , LI0_FR_CLLR_UV
  
   , LI0_FR_CLLR_OPEN2
  
   , LI0_FR_CLLR_OPEN1
  
   , LI0_FR_CLLR_OVC2
  
   , LI0_FR_CLLR_OVC1
  
   , LI0_FR_SLUD_SPEED
  
   , LI0_FR_SLUD_OpDone
  
   , LI0_FR_SLUD_STATE
  
   , LI0_FR_SLUD_ActuatorState
  
   , LI0_FR_SLUD_VddReset
  
   , LI0_FR_SLUD_Steploss
  
   , LI0_FR_SLUD_EIDef
  
   , LI0_FR_SLUD_TSD
  
   , LI0_FR_SLUD_TW
  
   , LI0_FR_SLUD_Tinfo
  
   , LI0_FR_SLUD_Sensor
  
   , LI0_FR_SLUD_OV
  
   , LI0_FR_SLUD_UV
  
   , LI0_FR_SLUD_OPEN2
  
   , LI0_FR_SLUD_OPEN1
  
   , LI0_FR_SLUD_OVC2
  
   , LI0_FR_SLUD_OVC1
  
   , LI0_FR_CLUD_SPEED
  
   , LI0_FR_CLUD_OpDone
  
   , LI0_FR_CLUD_STATE
  
   , LI0_FR_CLUD_ActuatorState
  
   , LI0_FR_CLUD_VddReset
  
   , LI0_FR_CLUD_Steploss
  
   , LI0_FR_CLUD_EIDef
  
   , LI0_FR_CLUD_TSD
  
   , LI0_FR_CLUD_TW
  
   , LI0_FR_CLUD_Tinfo
  
   , LI0_FR_CLUD_Sensor
  
   , LI0_FR_CLUD_OV
  
   , LI0_FR_CLUD_UV
  
   , LI0_FR_CLUD_OPEN2
  
   , LI0_FR_CLUD_OPEN1
  
   , LI0_FR_CLUD_OVC2
  
   , LI0_FR_CLUD_OVC1
  

   /* Interface_name = LI1 */

   , LI1_EVNT_ADDr
  
   , LI1_EVNT_Broad
  
   , LI1_EVNT_SPEED
  
   , LI1_EVNT_CMD
  
   , LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition
  
   , LI1_EVNT_Front_Side_RH_UpDown_TargetPosition
  
   , LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition
  
   , LI1_EVNT_Front_Center_RH_UpDown_TargetPosition
  
   , LI1_FR_SRLR_SPEED
  
   , LI1_FR_SRLR_OpDone
  
   , LI1_FR_SRLR_STATE
  
   , LI1_FR_SRLR_ActuatorState
  
   , LI1_FR_SRLR_VddReset
  
   , LI1_FR_SRLR_Steploss
  
   , LI1_FR_SRLR_EIDef
  
   , LI1_FR_SRLR_TSD
  
   , LI1_FR_SRLR_TW
  
   , LI1_FR_SRLR_Tinfo
  
   , LI1_FR_SRLR_Sensor
  
   , LI1_FR_SRLR_OV
  
   , LI1_FR_SRLR_UV
  
   , LI1_FR_SRLR_OPEN2
  
   , LI1_FR_SRLR_OPEN1
  
   , LI1_FR_SRLR_OVC2
  
   , LI1_FR_SRLR_OVC1
  
   , LI1_FR_CRLR_SPEED
  
   , LI1_FR_CRLR_OpDone
  
   , LI1_FR_CRLR_STATE
  
   , LI1_FR_CRLR_ActuatorState
  
   , LI1_FR_CRLR_VddReset
  
   , LI1_FR_CRLR_Steploss
  
   , LI1_FR_CRLR_EIDef
  
   , LI1_FR_CRLR_TSD
  
   , LI1_FR_CRLR_TW
  
   , LI1_FR_CRLR_Tinfo
  
   , LI1_FR_CRLR_Sensor
  
   , LI1_FR_CRLR_OV
  
   , LI1_FR_CRLR_UV
  
   , LI1_FR_CRLR_OPEN2
  
   , LI1_FR_CRLR_OPEN1
  
   , LI1_FR_CRLR_OVC2
  
   , LI1_FR_CRLR_OVC1
  
   , LI1_FR_SRUD_SPEED
  
   , LI1_FR_SRUD_OpDone
  
   , LI1_FR_SRUD_STATE
  
   , LI1_FR_SRUD_ActuatorState
  
   , LI1_FR_SRUD_VddReset
  
   , LI1_FR_SRUD_Steploss
  
   , LI1_FR_SRUD_EIDef
  
   , LI1_FR_SRUD_TSD
  
   , LI1_FR_SRUD_TW
  
   , LI1_FR_SRUD_Tinfo
  
   , LI1_FR_SRUD_Sensor
  
   , LI1_FR_SRUD_OV
  
   , LI1_FR_SRUD_UV
  
   , LI1_FR_SRUD_OPEN2
  
   , LI1_FR_SRUD_OPEN1
  
   , LI1_FR_SRUD_OVC2
  
   , LI1_FR_SRUD_OVC1
  
   , LI1_FR_CRUD_SPEED
  
   , LI1_FR_CRUD_OpDone
  
   , LI1_FR_CRUD_STATE
  
   , LI1_FR_CRUD_ActuatorState
  
   , LI1_FR_CRUD_VddReset
  
   , LI1_FR_CRUD_Steploss
  
   , LI1_FR_CRUD_EIDef
  
   , LI1_FR_CRUD_TSD
  
   , LI1_FR_CRUD_TW
  
   , LI1_FR_CRUD_Tinfo
  
   , LI1_FR_CRUD_Sensor
  
   , LI1_FR_CRUD_OV
  
   , LI1_FR_CRUD_UV
  
   , LI1_FR_CRUD_OPEN2
  
   , LI1_FR_CRUD_OPEN1
  
   , LI1_FR_CRUD_OVC2
  
   , LI1_FR_CRUD_OVC1
  
   /* Interface_name = LI2 */

   , LI2_EVNT_ADDr
  
   , LI2_EVNT_Broad
  
   , LI2_EVNT_REAR_LH_SPEED
  
   , LI2_EVNT_REAR_RH_SPEED
  
   , LI2_EVNT_CMD
  
   , LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition
  
   , LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition
  
   , LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition
  
   , LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition
  
   , LI2_RR_CLLR_SPEED
  
   , LI2_RR_CLLR_OpDone
  
   , LI2_RR_CLLR_STATE
  
   , LI2_RR_CLLR_ActuatorState
  
   , LI2_RR_CLLR_VddReset
  
   , LI2_RR_CLLR_Steploss
  
   , LI2_RR_CLLR_EIDef
  
   , LI2_RR_CLLR_TSD
  
   , LI2_RR_CLLR_TW
  
   , LI2_RR_CLLR_Tinfo
  
   , LI2_RR_CLLR_Sensor
  
   , LI2_RR_CLLR_OV
  
   , LI2_RR_CLLR_UV
  
   , LI2_RR_CLLR_OPEN2
  
   , LI2_RR_CLLR_OPEN1
  
   , LI2_RR_CLLR_OVC2
  
   , LI2_RR_CLLR_OVC1
  
   , LI2_RR_CRLR_SPEED
  
   , LI2_RR_CRLR_OpDone
  
   , LI2_RR_CRLR_STATE
  
   , LI2_RR_CRLR_ActuatorState
  
   , LI2_RR_CRLR_VddReset
  
   , LI2_RR_CRLR_Steploss
  
   , LI2_RR_CRLR_EIDef
  
   , LI2_RR_CRLR_TSD
  
   , LI2_RR_CRLR_TW
  
   , LI2_RR_CRLR_Tinfo
  
   , LI2_RR_CRLR_Sensor
  
   , LI2_RR_CRLR_OV
  
   , LI2_RR_CRLR_UV
  
   , LI2_RR_CRLR_OPEN2
  
   , LI2_RR_CRLR_OPEN1
  
   , LI2_RR_CRLR_OVC2
  
   , LI2_RR_CRLR_OVC1
  
   , LI2_RR_CLUD_SPEED
  
   , LI2_RR_CLUD_OpDone
  
   , LI2_RR_CLUD_STATE
  
   , LI2_RR_CLUD_ActuatorState
  
   , LI2_RR_CLUD_VddReset
  
   , LI2_RR_CLUD_Steploss
  
   , LI2_RR_CLUD_EIDef
  
   , LI2_RR_CLUD_TSD
  
   , LI2_RR_CLUD_TW
  
   , LI2_RR_CLUD_Tinfo
  
   , LI2_RR_CLUD_Sensor
  
   , LI2_RR_CLUD_OV
  
   , LI2_RR_CLUD_UV
  
   , LI2_RR_CLUD_OPEN2
  
   , LI2_RR_CLUD_OPEN1
  
   , LI2_RR_CLUD_OVC2
  
   , LI2_RR_CLUD_OVC1
  
   , LI2_RR_CRUD_SPEED
  
   , LI2_RR_CRUD_OpDone
  
   , LI2_RR_CRUD_STATE
  
   , LI2_RR_CRUD_ActuatorState
  
   , LI2_RR_CRUD_VddReset
  
   , LI2_RR_CRUD_Steploss
  
   , LI2_RR_CRUD_EIDef
  
   , LI2_RR_CRUD_TSD
  
   , LI2_RR_CRUD_TW
  
   , LI2_RR_CRUD_Tinfo
  
   , LI2_RR_CRUD_Sensor
  
   , LI2_RR_CRUD_OV
  
   , LI2_RR_CRUD_UV
  
   , LI2_RR_CRUD_OPEN2
  
   , LI2_RR_CRUD_OPEN1
  
   , LI2_RR_CRUD_OVC2
  
   , LI2_RR_CRUD_OVC1
  
} l_signal_handle;
/**********************************************************************/
/*****************               Frame             ********************/
/**********************************************************************/
/* Number of frames */
#define LIN_NUM_OF_FRMS  24U
/* List of frames */
typedef enum {
/* All frames for master node */

   /* Interface_name = LI0 */

   LI0_EVNT_MASTER_COMMAND

   , LI0_FR_SLLR_STATUS
  
   , LI0_FR_SLUD_STATUS
  
   , LI0_FR_CLLR_STATUS
  
   , LI0_FR_CLUD_STATUS
  
   , LI0_EVNT_SPECIAL_COMMAND
  
   , LI0_MasterReq
  
   , LI0_SlaveResp
  

   /* Interface_name = LI1 */

   , LI1_EVNT_MASTER_COMMAND
  
   , LI1_FR_CRLR_STATUS
  
   , LI1_FR_CRUD_STATUS
  
   , LI1_FR_SRLR_STATUS
  
   , LI1_FR_SRUD_STATUS
  
   , LI1_EVNT_SPECIAL_COMMAND
  
   , LI1_MasterReq
  
   , LI1_SlaveResp
  
   /* Interface_name = LI2 */

   , LI2_EVNT_MASTER_COMMAND
  
   , LI2_RR_CLLR_STATUS
  
   , LI2_RR_CLUD_STATUS
  
   , LI2_RR_CRLR_STATUS
  
   , LI2_RR_CRUD_STATUS
  
   , LI2_EVNT_SPECIAL_COMMAND
  
   , LI2_MasterReq
  
   , LI2_SlaveResp
  
} l_frame_handle;
/**********************************************************************/
/***************        schedule table       *******************/
/**********************************************************************/
/* Number of schedule tables */
#define  LIN_NUM_OF_SCHD_TBL   18U
/* List of schedules */
typedef enum {

   /* Interface_name = LI0 */

   LI0_LIN_NULL_SCHEDULE

   ,LI0_GOTO_SLEEP_SCHEDULE
   
   ,LI0_Diag_request
   
   ,LI0_Diag_response
   
   ,LI0_SCHEDULER_EVNT_NORMAL_FR_DRV
   
   ,LI0_SCHEDULER_EVNT_SPECIAL_CMD_FR_DRV
   

   /* Interface_name = LI1 */

   ,LI1_LIN_NULL_SCHEDULE
   
   ,LI1_GOTO_SLEEP_SCHEDULE
   
   ,LI1_Diag_request
   
   ,LI1_Diag_response
   
   ,LI1_SCHEDULER_EVNT_NORMAL_FR_PASS
   
   ,LI1_SCHEDULER_EVNT_SPECIAL_CMD_FR_PASS
   
   /* Interface_name = LI2 */

   ,LI2_LIN_NULL_SCHEDULE
   
   ,LI2_GOTO_SLEEP_SCHEDULE
   
   ,LI2_Diag_request
   
   ,LI2_Diag_response
   
   ,LI2_SCHEDULER_EVNT_NORMAL_RR_CTR
   
   ,LI2_SCHEDULER_EVNT_SPECIAL_CMD_RR_CTR
   
}l_schedule_handle;
/**********************************************************************/
/***************             Configuration          *******************/
/**********************************************************************/


/* Size of configuration in ROM and RAM used for interface: LI0 */
#define LI0_LIN_SIZE_OF_CFG  10U

/* Size of configuration in ROM and RAM used for interface: LI1 */
#define LI1_LIN_SIZE_OF_CFG  10U

/* Size of configuration in ROM and RAM used for interface: LI2 */
#define LI2_LIN_SIZE_OF_CFG  10U



/*********************************************************************
 * global macros
 *********************************************************************/
/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_rd
 * Description   : This function return value of bool signal
 *
 * Implements    : l_bool_rd_Class
 *END**************************************************************************/
#define l_bool_rd(SIGNAL) l_bool_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_wr
 * Description   : This function write value A to bool signal
 *
 * Implements    : l_bool_wr_Class
 *END**************************************************************************/
#define l_bool_wr(SIGNAL, A) l_bool_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_rd
 * Description   : This function read data from (1-8 bit)signal
 *
 * Implements    : l_u8_rd_Class
 *END**************************************************************************/
#define l_u8_rd(SIGNAL) l_u8_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_wr
 * Description   : This this function write data to (1-8 bit)signal
 *
 * Implements    : l_u8_wr_Class
 *END**************************************************************************/
#define l_u8_wr(SIGNAL, A) l_u8_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_rd
 * Description   : This function read data from (8-16 bit)signal
 *
 * Implements    : l_u16_rd_Class
 *END**************************************************************************/
#define l_u16_rd(SIGNAL) l_u16_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_wr
 * Description   : This function write data to (8-16 bit) signal
 *
 * Implements    : l_u16_wr_Class
 *END**************************************************************************/
#define l_u16_wr(SIGNAL, A) l_u16_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_rd
 * Description   : This function read data from bytes signal
 *
 * Implements    : l_bytes_rd_Class
 *END**************************************************************************/
#define l_bytes_rd(SIGNAL, start, count, data)  l_bytes_rd_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_wr
 * Description   : This function write data to bytes signal
 *
 * Implements    : l_bytes_wr_Class
 *END**************************************************************************/
#define l_bytes_wr(SIGNAL, start, count, data) l_bytes_wr_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_tst
 * Description   : This function return value of flag which related with signal
 *
 * Implements    : l_flg_tst_Class
 *END**************************************************************************/
#define l_flg_tst(FLAG) l_flg_tst_##FLAG()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_clr
 * Description   : This function clear flag which related with signal
 *
 * Implements    : l_flg_clr_Class
 *END**************************************************************************/
#define l_flg_clr(FLAG) l_flg_clr_##FLAG()

#define LIN_TEST_BIT(A,B) ((l_bool)((((A) & (1U << (B))) != 0U) ? 1U : 0U))
#define LIN_SET_BIT(A,B)                      ((A) |= (l_u8) (1U << (B)))
#define LIN_CLEAR_BIT(A,B)               ((A) &= ((l_u8) (~(1U << (B)))))
#define LIN_BYTE_MASK  ((l_u16)(((l_u16)((l_u16)1 << CHAR_BIT)) - (l_u16)1))


/* Returns the low byte of the 32-bit value    */
#define BYTE_0(n)                              ((l_u8)((n) & (l_u8)0xFF))
/* Returns the second byte of the 32-bit value */
#define BYTE_1(n)                        ((l_u8)(BYTE_0((n) >> (l_u8)8)))
/* Returns the third byte of the 32-bit value  */
#define BYTE_2(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)16)))
/* Returns high byte of the 32-bit value       */
#define BYTE_3(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)24)))

/*
 * defines for signal access
 */



#define LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_BIT_OFFSET    0U
#define LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_SIGNAL_SIZE    7U
#define LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET    0U

#define LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET    25U
#define LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BIT_OFFSET    0U
#define LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_SIGNAL_SIZE    7U
#define LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET    7U
#define LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_SIGNAL_SIZE    1U
#define LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET    1U

#define LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET    25U
#define LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET    7U
#define LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_SIGNAL_SIZE    1U
#define LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EVNT_SPEED_BYTE_OFFSET    1U
#define LIN_LI0_EVNT_SPEED_BIT_OFFSET    0U
#define LIN_LI0_EVNT_SPEED_SIGNAL_SIZE    4U
#define LIN_LI0_EVNT_SPEED_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_SPEED_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EVNT_CMD_BYTE_OFFSET    24U
#define LIN_LI0_EVNT_CMD_BIT_OFFSET    0U
#define LIN_LI0_EVNT_CMD_SIGNAL_SIZE    8U
#define LIN_LI0_EVNT_CMD_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EVNT_CMD_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET    1U
#define LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BIT_OFFSET    4U
#define LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET    3U


#define LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET    3U
#define LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BIT_OFFSET    0U
#define LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET    4U


#define LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET    4U
#define LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BIT_OFFSET    4U
#define LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET    5U


#define LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET    6U
#define LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BIT_OFFSET    0U
#define LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_SLLR_SPEED_BYTE_OFFSET    8U
#define LIN_LI0_FR_SLLR_SPEED_BIT_OFFSET    0U
#define LIN_LI0_FR_SLLR_SPEED_SIGNAL_SIZE    4U
#define LIN_LI0_FR_SLLR_SPEED_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_SLLR_OpDone_BYTE_OFFSET    10U
#define LIN_LI0_FR_SLLR_OpDone_BIT_OFFSET    0U
#define LIN_LI0_FR_SLLR_OpDone_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_OpDone_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_SLLR_STATE_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_STATE_BIT_OFFSET    0U
#define LIN_LI0_FR_SLLR_STATE_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_STATE_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET    8U
#define LIN_LI0_FR_SLLR_ActuatorState_BIT_OFFSET    4U
#define LIN_LI0_FR_SLLR_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI0_FR_SLLR_ActuatorState_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_SLLR_VddReset_BYTE_OFFSET    10U
#define LIN_LI0_FR_SLLR_VddReset_BIT_OFFSET    1U
#define LIN_LI0_FR_SLLR_VddReset_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_VddReset_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_SLLR_Steploss_BYTE_OFFSET    10U
#define LIN_LI0_FR_SLLR_Steploss_BIT_OFFSET    2U
#define LIN_LI0_FR_SLLR_Steploss_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_Steploss_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_SLLR_EIDef_BYTE_OFFSET    10U
#define LIN_LI0_FR_SLLR_EIDef_BIT_OFFSET    3U
#define LIN_LI0_FR_SLLR_EIDef_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_EIDef_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_SLLR_TSD_BYTE_OFFSET    10U
#define LIN_LI0_FR_SLLR_TSD_BIT_OFFSET    4U
#define LIN_LI0_FR_SLLR_TSD_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_TSD_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_SLLR_TW_BYTE_OFFSET    10U
#define LIN_LI0_FR_SLLR_TW_BIT_OFFSET    5U
#define LIN_LI0_FR_SLLR_TW_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_TW_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_FR_SLLR_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_SLLR_Tinfo_BYTE_OFFSET    10U
#define LIN_LI0_FR_SLLR_Tinfo_BIT_OFFSET    6U
#define LIN_LI0_FR_SLLR_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI0_FR_SLLR_Tinfo_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_SLLR_Sensor_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_Sensor_BIT_OFFSET    1U
#define LIN_LI0_FR_SLLR_Sensor_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_Sensor_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_SLLR_OV_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_OV_BIT_OFFSET    2U
#define LIN_LI0_FR_SLLR_OV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_OV_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_SLLR_UV_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_UV_BIT_OFFSET    3U
#define LIN_LI0_FR_SLLR_UV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_UV_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_SLLR_OPEN2_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_OPEN2_BIT_OFFSET    4U
#define LIN_LI0_FR_SLLR_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_OPEN2_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_SLLR_OPEN1_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_OPEN1_BIT_OFFSET    5U
#define LIN_LI0_FR_SLLR_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_OPEN1_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_SLLR_OVC2_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_OVC2_BIT_OFFSET    6U
#define LIN_LI0_FR_SLLR_OVC2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_OVC2_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_FR_SLLR_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_SLLR_OVC1_BYTE_OFFSET    11U
#define LIN_LI0_FR_SLLR_OVC1_BIT_OFFSET    7U
#define LIN_LI0_FR_SLLR_OVC1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLLR_OVC1_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_FR_SLLR_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_CLLR_SPEED_BYTE_OFFSET    16U
#define LIN_LI0_FR_CLLR_SPEED_BIT_OFFSET    0U
#define LIN_LI0_FR_CLLR_SPEED_SIGNAL_SIZE    4U
#define LIN_LI0_FR_CLLR_SPEED_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_CLLR_OpDone_BYTE_OFFSET    18U
#define LIN_LI0_FR_CLLR_OpDone_BIT_OFFSET    0U
#define LIN_LI0_FR_CLLR_OpDone_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_OpDone_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_CLLR_STATE_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_STATE_BIT_OFFSET    0U
#define LIN_LI0_FR_CLLR_STATE_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_STATE_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET    16U
#define LIN_LI0_FR_CLLR_ActuatorState_BIT_OFFSET    4U
#define LIN_LI0_FR_CLLR_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI0_FR_CLLR_ActuatorState_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_CLLR_VddReset_BYTE_OFFSET    18U
#define LIN_LI0_FR_CLLR_VddReset_BIT_OFFSET    1U
#define LIN_LI0_FR_CLLR_VddReset_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_VddReset_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_CLLR_Steploss_BYTE_OFFSET    18U
#define LIN_LI0_FR_CLLR_Steploss_BIT_OFFSET    2U
#define LIN_LI0_FR_CLLR_Steploss_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_Steploss_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_CLLR_EIDef_BYTE_OFFSET    18U
#define LIN_LI0_FR_CLLR_EIDef_BIT_OFFSET    3U
#define LIN_LI0_FR_CLLR_EIDef_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_EIDef_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_CLLR_TSD_BYTE_OFFSET    18U
#define LIN_LI0_FR_CLLR_TSD_BIT_OFFSET    4U
#define LIN_LI0_FR_CLLR_TSD_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_TSD_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_CLLR_TW_BYTE_OFFSET    18U
#define LIN_LI0_FR_CLLR_TW_BIT_OFFSET    5U
#define LIN_LI0_FR_CLLR_TW_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_TW_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_FR_CLLR_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_CLLR_Tinfo_BYTE_OFFSET    18U
#define LIN_LI0_FR_CLLR_Tinfo_BIT_OFFSET    6U
#define LIN_LI0_FR_CLLR_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI0_FR_CLLR_Tinfo_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_CLLR_Sensor_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_Sensor_BIT_OFFSET    1U
#define LIN_LI0_FR_CLLR_Sensor_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_Sensor_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_CLLR_OV_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_OV_BIT_OFFSET    2U
#define LIN_LI0_FR_CLLR_OV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_OV_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_CLLR_UV_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_UV_BIT_OFFSET    3U
#define LIN_LI0_FR_CLLR_UV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_UV_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_CLLR_OPEN2_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_OPEN2_BIT_OFFSET    4U
#define LIN_LI0_FR_CLLR_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_OPEN2_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_CLLR_OPEN1_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_OPEN1_BIT_OFFSET    5U
#define LIN_LI0_FR_CLLR_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_OPEN1_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_CLLR_OVC2_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_OVC2_BIT_OFFSET    6U
#define LIN_LI0_FR_CLLR_OVC2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_OVC2_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_FR_CLLR_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_CLLR_OVC1_BYTE_OFFSET    19U
#define LIN_LI0_FR_CLLR_OVC1_BIT_OFFSET    7U
#define LIN_LI0_FR_CLLR_OVC1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLLR_OVC1_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_FR_CLLR_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_SLUD_SPEED_BYTE_OFFSET    12U
#define LIN_LI0_FR_SLUD_SPEED_BIT_OFFSET    0U
#define LIN_LI0_FR_SLUD_SPEED_SIGNAL_SIZE    4U
#define LIN_LI0_FR_SLUD_SPEED_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_SLUD_OpDone_BYTE_OFFSET    14U
#define LIN_LI0_FR_SLUD_OpDone_BIT_OFFSET    0U
#define LIN_LI0_FR_SLUD_OpDone_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_OpDone_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_SLUD_STATE_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_STATE_BIT_OFFSET    0U
#define LIN_LI0_FR_SLUD_STATE_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_STATE_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET    12U
#define LIN_LI0_FR_SLUD_ActuatorState_BIT_OFFSET    4U
#define LIN_LI0_FR_SLUD_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI0_FR_SLUD_ActuatorState_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_SLUD_VddReset_BYTE_OFFSET    14U
#define LIN_LI0_FR_SLUD_VddReset_BIT_OFFSET    1U
#define LIN_LI0_FR_SLUD_VddReset_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_VddReset_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_SLUD_Steploss_BYTE_OFFSET    14U
#define LIN_LI0_FR_SLUD_Steploss_BIT_OFFSET    2U
#define LIN_LI0_FR_SLUD_Steploss_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_Steploss_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_SLUD_EIDef_BYTE_OFFSET    14U
#define LIN_LI0_FR_SLUD_EIDef_BIT_OFFSET    3U
#define LIN_LI0_FR_SLUD_EIDef_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_EIDef_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_SLUD_TSD_BYTE_OFFSET    14U
#define LIN_LI0_FR_SLUD_TSD_BIT_OFFSET    4U
#define LIN_LI0_FR_SLUD_TSD_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_TSD_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_SLUD_TW_BYTE_OFFSET    14U
#define LIN_LI0_FR_SLUD_TW_BIT_OFFSET    5U
#define LIN_LI0_FR_SLUD_TW_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_TW_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_FR_SLUD_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_SLUD_Tinfo_BYTE_OFFSET    14U
#define LIN_LI0_FR_SLUD_Tinfo_BIT_OFFSET    6U
#define LIN_LI0_FR_SLUD_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI0_FR_SLUD_Tinfo_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_SLUD_Sensor_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_Sensor_BIT_OFFSET    1U
#define LIN_LI0_FR_SLUD_Sensor_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_Sensor_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_SLUD_OV_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_OV_BIT_OFFSET    2U
#define LIN_LI0_FR_SLUD_OV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_OV_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_SLUD_UV_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_UV_BIT_OFFSET    3U
#define LIN_LI0_FR_SLUD_UV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_UV_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_SLUD_OPEN2_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_OPEN2_BIT_OFFSET    4U
#define LIN_LI0_FR_SLUD_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_OPEN2_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_SLUD_OPEN1_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_OPEN1_BIT_OFFSET    5U
#define LIN_LI0_FR_SLUD_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_OPEN1_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_SLUD_OVC2_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_OVC2_BIT_OFFSET    6U
#define LIN_LI0_FR_SLUD_OVC2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_OVC2_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_FR_SLUD_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_SLUD_OVC1_BYTE_OFFSET    15U
#define LIN_LI0_FR_SLUD_OVC1_BIT_OFFSET    7U
#define LIN_LI0_FR_SLUD_OVC1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_SLUD_OVC1_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_FR_SLUD_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_CLUD_SPEED_BYTE_OFFSET    20U
#define LIN_LI0_FR_CLUD_SPEED_BIT_OFFSET    0U
#define LIN_LI0_FR_CLUD_SPEED_SIGNAL_SIZE    4U
#define LIN_LI0_FR_CLUD_SPEED_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_CLUD_OpDone_BYTE_OFFSET    22U
#define LIN_LI0_FR_CLUD_OpDone_BIT_OFFSET    0U
#define LIN_LI0_FR_CLUD_OpDone_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_OpDone_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_CLUD_STATE_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_STATE_BIT_OFFSET    0U
#define LIN_LI0_FR_CLUD_STATE_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_STATE_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET    20U
#define LIN_LI0_FR_CLUD_ActuatorState_BIT_OFFSET    4U
#define LIN_LI0_FR_CLUD_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI0_FR_CLUD_ActuatorState_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI0_FR_CLUD_VddReset_BYTE_OFFSET    22U
#define LIN_LI0_FR_CLUD_VddReset_BIT_OFFSET    1U
#define LIN_LI0_FR_CLUD_VddReset_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_VddReset_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_CLUD_Steploss_BYTE_OFFSET    22U
#define LIN_LI0_FR_CLUD_Steploss_BIT_OFFSET    2U
#define LIN_LI0_FR_CLUD_Steploss_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_Steploss_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_CLUD_EIDef_BYTE_OFFSET    22U
#define LIN_LI0_FR_CLUD_EIDef_BIT_OFFSET    3U
#define LIN_LI0_FR_CLUD_EIDef_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_EIDef_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_CLUD_TSD_BYTE_OFFSET    22U
#define LIN_LI0_FR_CLUD_TSD_BIT_OFFSET    4U
#define LIN_LI0_FR_CLUD_TSD_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_TSD_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_CLUD_TW_BYTE_OFFSET    22U
#define LIN_LI0_FR_CLUD_TW_BIT_OFFSET    5U
#define LIN_LI0_FR_CLUD_TW_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_TW_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_FR_CLUD_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_CLUD_Tinfo_BYTE_OFFSET    22U
#define LIN_LI0_FR_CLUD_Tinfo_BIT_OFFSET    6U
#define LIN_LI0_FR_CLUD_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI0_FR_CLUD_Tinfo_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI0_FR_CLUD_Sensor_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_Sensor_BIT_OFFSET    1U
#define LIN_LI0_FR_CLUD_Sensor_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_Sensor_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI0_FR_CLUD_OV_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_OV_BIT_OFFSET    2U
#define LIN_LI0_FR_CLUD_OV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_OV_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI0_FR_CLUD_UV_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_UV_BIT_OFFSET    3U
#define LIN_LI0_FR_CLUD_UV_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_UV_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI0_FR_CLUD_OPEN2_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_OPEN2_BIT_OFFSET    4U
#define LIN_LI0_FR_CLUD_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_OPEN2_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI0_FR_CLUD_OPEN1_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_OPEN1_BIT_OFFSET    5U
#define LIN_LI0_FR_CLUD_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_OPEN1_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI0_FR_CLUD_OVC2_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_OVC2_BIT_OFFSET    6U
#define LIN_LI0_FR_CLUD_OVC2_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_OVC2_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_FR_CLUD_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI0_FR_CLUD_OVC1_BYTE_OFFSET    23U
#define LIN_LI0_FR_CLUD_OVC1_BIT_OFFSET    7U
#define LIN_LI0_FR_CLUD_OVC1_SIGNAL_SIZE    1U
#define LIN_LI0_FR_CLUD_OVC1_FLAG_BYTE_OFFSET    12U
#define LIN_LI0_FR_CLUD_OVC1_FLAG_BIT_OFFSET    0U




#define LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET    26U
#define LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_BIT_OFFSET    0U
#define LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_SIGNAL_SIZE    7U
#define LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET    14U
#define LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET    0U

#define LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET    51U
#define LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BIT_OFFSET    0U
#define LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_SIGNAL_SIZE    7U
#define LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET    27U
#define LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET    1U


#define LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET    26U
#define LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET    7U
#define LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_SIGNAL_SIZE    1U
#define LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET    14U
#define LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET    1U

#define LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET    51U
#define LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET    7U
#define LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_SIGNAL_SIZE    1U
#define LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET    27U
#define LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET    2U


#define LIN_LI1_EVNT_SPEED_BYTE_OFFSET    27U
#define LIN_LI1_EVNT_SPEED_BIT_OFFSET    0U
#define LIN_LI1_EVNT_SPEED_SIGNAL_SIZE    4U
#define LIN_LI1_EVNT_SPEED_FLAG_BYTE_OFFSET    14U
#define LIN_LI1_EVNT_SPEED_FLAG_BIT_OFFSET    2U


#define LIN_LI1_EVNT_CMD_BYTE_OFFSET    50U
#define LIN_LI1_EVNT_CMD_BIT_OFFSET    0U
#define LIN_LI1_EVNT_CMD_SIGNAL_SIZE    8U
#define LIN_LI1_EVNT_CMD_FLAG_BYTE_OFFSET    27U
#define LIN_LI1_EVNT_CMD_FLAG_BIT_OFFSET    0U


#define LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET    30U
#define LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BIT_OFFSET    4U
#define LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET    14U
#define LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET    5U


#define LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET    32U
#define LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BIT_OFFSET    0U
#define LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET    14U
#define LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET    6U


#define LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET    27U
#define LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BIT_OFFSET    4U
#define LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET    14U
#define LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET    3U


#define LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET    29U
#define LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BIT_OFFSET    0U
#define LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_SIGNAL_SIZE    12U
#define LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET    14U
#define LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_SRLR_SPEED_BYTE_OFFSET    42U
#define LIN_LI1_FR_SRLR_SPEED_BIT_OFFSET    0U
#define LIN_LI1_FR_SRLR_SPEED_SIGNAL_SIZE    4U
#define LIN_LI1_FR_SRLR_SPEED_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_SRLR_OpDone_BYTE_OFFSET    44U
#define LIN_LI1_FR_SRLR_OpDone_BIT_OFFSET    0U
#define LIN_LI1_FR_SRLR_OpDone_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_OpDone_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_SRLR_STATE_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_STATE_BIT_OFFSET    0U
#define LIN_LI1_FR_SRLR_STATE_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_STATE_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET    42U
#define LIN_LI1_FR_SRLR_ActuatorState_BIT_OFFSET    4U
#define LIN_LI1_FR_SRLR_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI1_FR_SRLR_ActuatorState_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_SRLR_VddReset_BYTE_OFFSET    44U
#define LIN_LI1_FR_SRLR_VddReset_BIT_OFFSET    1U
#define LIN_LI1_FR_SRLR_VddReset_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_VddReset_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_SRLR_Steploss_BYTE_OFFSET    44U
#define LIN_LI1_FR_SRLR_Steploss_BIT_OFFSET    2U
#define LIN_LI1_FR_SRLR_Steploss_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_Steploss_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_SRLR_EIDef_BYTE_OFFSET    44U
#define LIN_LI1_FR_SRLR_EIDef_BIT_OFFSET    3U
#define LIN_LI1_FR_SRLR_EIDef_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_EIDef_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_SRLR_TSD_BYTE_OFFSET    44U
#define LIN_LI1_FR_SRLR_TSD_BIT_OFFSET    4U
#define LIN_LI1_FR_SRLR_TSD_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_TSD_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_SRLR_TW_BYTE_OFFSET    44U
#define LIN_LI1_FR_SRLR_TW_BIT_OFFSET    5U
#define LIN_LI1_FR_SRLR_TW_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_TW_FLAG_BYTE_OFFSET    21U
#define LIN_LI1_FR_SRLR_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_SRLR_Tinfo_BYTE_OFFSET    44U
#define LIN_LI1_FR_SRLR_Tinfo_BIT_OFFSET    6U
#define LIN_LI1_FR_SRLR_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI1_FR_SRLR_Tinfo_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_SRLR_Sensor_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_Sensor_BIT_OFFSET    1U
#define LIN_LI1_FR_SRLR_Sensor_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_Sensor_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_SRLR_OV_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_OV_BIT_OFFSET    2U
#define LIN_LI1_FR_SRLR_OV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_OV_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_SRLR_UV_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_UV_BIT_OFFSET    3U
#define LIN_LI1_FR_SRLR_UV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_UV_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_SRLR_OPEN2_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_OPEN2_BIT_OFFSET    4U
#define LIN_LI1_FR_SRLR_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_OPEN2_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_SRLR_OPEN1_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_OPEN1_BIT_OFFSET    5U
#define LIN_LI1_FR_SRLR_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_OPEN1_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_SRLR_OVC2_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_OVC2_BIT_OFFSET    6U
#define LIN_LI1_FR_SRLR_OVC2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_OVC2_FLAG_BYTE_OFFSET    22U
#define LIN_LI1_FR_SRLR_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_SRLR_OVC1_BYTE_OFFSET    45U
#define LIN_LI1_FR_SRLR_OVC1_BIT_OFFSET    7U
#define LIN_LI1_FR_SRLR_OVC1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRLR_OVC1_FLAG_BYTE_OFFSET    23U
#define LIN_LI1_FR_SRLR_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_CRLR_SPEED_BYTE_OFFSET    34U
#define LIN_LI1_FR_CRLR_SPEED_BIT_OFFSET    0U
#define LIN_LI1_FR_CRLR_SPEED_SIGNAL_SIZE    4U
#define LIN_LI1_FR_CRLR_SPEED_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_CRLR_OpDone_BYTE_OFFSET    36U
#define LIN_LI1_FR_CRLR_OpDone_BIT_OFFSET    0U
#define LIN_LI1_FR_CRLR_OpDone_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_OpDone_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_CRLR_STATE_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_STATE_BIT_OFFSET    0U
#define LIN_LI1_FR_CRLR_STATE_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_STATE_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET    34U
#define LIN_LI1_FR_CRLR_ActuatorState_BIT_OFFSET    4U
#define LIN_LI1_FR_CRLR_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI1_FR_CRLR_ActuatorState_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_CRLR_VddReset_BYTE_OFFSET    36U
#define LIN_LI1_FR_CRLR_VddReset_BIT_OFFSET    1U
#define LIN_LI1_FR_CRLR_VddReset_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_VddReset_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_CRLR_Steploss_BYTE_OFFSET    36U
#define LIN_LI1_FR_CRLR_Steploss_BIT_OFFSET    2U
#define LIN_LI1_FR_CRLR_Steploss_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_Steploss_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_CRLR_EIDef_BYTE_OFFSET    36U
#define LIN_LI1_FR_CRLR_EIDef_BIT_OFFSET    3U
#define LIN_LI1_FR_CRLR_EIDef_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_EIDef_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_CRLR_TSD_BYTE_OFFSET    36U
#define LIN_LI1_FR_CRLR_TSD_BIT_OFFSET    4U
#define LIN_LI1_FR_CRLR_TSD_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_TSD_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_CRLR_TW_BYTE_OFFSET    36U
#define LIN_LI1_FR_CRLR_TW_BIT_OFFSET    5U
#define LIN_LI1_FR_CRLR_TW_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_TW_FLAG_BYTE_OFFSET    15U
#define LIN_LI1_FR_CRLR_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_CRLR_Tinfo_BYTE_OFFSET    36U
#define LIN_LI1_FR_CRLR_Tinfo_BIT_OFFSET    6U
#define LIN_LI1_FR_CRLR_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI1_FR_CRLR_Tinfo_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_CRLR_Sensor_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_Sensor_BIT_OFFSET    1U
#define LIN_LI1_FR_CRLR_Sensor_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_Sensor_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_CRLR_OV_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_OV_BIT_OFFSET    2U
#define LIN_LI1_FR_CRLR_OV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_OV_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_CRLR_UV_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_UV_BIT_OFFSET    3U
#define LIN_LI1_FR_CRLR_UV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_UV_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_CRLR_OPEN2_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_OPEN2_BIT_OFFSET    4U
#define LIN_LI1_FR_CRLR_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_OPEN2_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_CRLR_OPEN1_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_OPEN1_BIT_OFFSET    5U
#define LIN_LI1_FR_CRLR_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_OPEN1_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_CRLR_OVC2_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_OVC2_BIT_OFFSET    6U
#define LIN_LI1_FR_CRLR_OVC2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_OVC2_FLAG_BYTE_OFFSET    16U
#define LIN_LI1_FR_CRLR_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_CRLR_OVC1_BYTE_OFFSET    37U
#define LIN_LI1_FR_CRLR_OVC1_BIT_OFFSET    7U
#define LIN_LI1_FR_CRLR_OVC1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRLR_OVC1_FLAG_BYTE_OFFSET    17U
#define LIN_LI1_FR_CRLR_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_SRUD_SPEED_BYTE_OFFSET    46U
#define LIN_LI1_FR_SRUD_SPEED_BIT_OFFSET    0U
#define LIN_LI1_FR_SRUD_SPEED_SIGNAL_SIZE    4U
#define LIN_LI1_FR_SRUD_SPEED_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_SRUD_OpDone_BYTE_OFFSET    48U
#define LIN_LI1_FR_SRUD_OpDone_BIT_OFFSET    0U
#define LIN_LI1_FR_SRUD_OpDone_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_OpDone_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_SRUD_STATE_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_STATE_BIT_OFFSET    0U
#define LIN_LI1_FR_SRUD_STATE_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_STATE_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET    46U
#define LIN_LI1_FR_SRUD_ActuatorState_BIT_OFFSET    4U
#define LIN_LI1_FR_SRUD_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI1_FR_SRUD_ActuatorState_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_SRUD_VddReset_BYTE_OFFSET    48U
#define LIN_LI1_FR_SRUD_VddReset_BIT_OFFSET    1U
#define LIN_LI1_FR_SRUD_VddReset_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_VddReset_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_SRUD_Steploss_BYTE_OFFSET    48U
#define LIN_LI1_FR_SRUD_Steploss_BIT_OFFSET    2U
#define LIN_LI1_FR_SRUD_Steploss_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_Steploss_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_SRUD_EIDef_BYTE_OFFSET    48U
#define LIN_LI1_FR_SRUD_EIDef_BIT_OFFSET    3U
#define LIN_LI1_FR_SRUD_EIDef_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_EIDef_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_SRUD_TSD_BYTE_OFFSET    48U
#define LIN_LI1_FR_SRUD_TSD_BIT_OFFSET    4U
#define LIN_LI1_FR_SRUD_TSD_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_TSD_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_SRUD_TW_BYTE_OFFSET    48U
#define LIN_LI1_FR_SRUD_TW_BIT_OFFSET    5U
#define LIN_LI1_FR_SRUD_TW_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_TW_FLAG_BYTE_OFFSET    24U
#define LIN_LI1_FR_SRUD_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_SRUD_Tinfo_BYTE_OFFSET    48U
#define LIN_LI1_FR_SRUD_Tinfo_BIT_OFFSET    6U
#define LIN_LI1_FR_SRUD_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI1_FR_SRUD_Tinfo_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_SRUD_Sensor_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_Sensor_BIT_OFFSET    1U
#define LIN_LI1_FR_SRUD_Sensor_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_Sensor_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_SRUD_OV_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_OV_BIT_OFFSET    2U
#define LIN_LI1_FR_SRUD_OV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_OV_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_SRUD_UV_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_UV_BIT_OFFSET    3U
#define LIN_LI1_FR_SRUD_UV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_UV_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_SRUD_OPEN2_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_OPEN2_BIT_OFFSET    4U
#define LIN_LI1_FR_SRUD_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_OPEN2_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_SRUD_OPEN1_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_OPEN1_BIT_OFFSET    5U
#define LIN_LI1_FR_SRUD_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_OPEN1_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_SRUD_OVC2_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_OVC2_BIT_OFFSET    6U
#define LIN_LI1_FR_SRUD_OVC2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_OVC2_FLAG_BYTE_OFFSET    25U
#define LIN_LI1_FR_SRUD_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_SRUD_OVC1_BYTE_OFFSET    49U
#define LIN_LI1_FR_SRUD_OVC1_BIT_OFFSET    7U
#define LIN_LI1_FR_SRUD_OVC1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_SRUD_OVC1_FLAG_BYTE_OFFSET    26U
#define LIN_LI1_FR_SRUD_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_CRUD_SPEED_BYTE_OFFSET    38U
#define LIN_LI1_FR_CRUD_SPEED_BIT_OFFSET    0U
#define LIN_LI1_FR_CRUD_SPEED_SIGNAL_SIZE    4U
#define LIN_LI1_FR_CRUD_SPEED_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_CRUD_OpDone_BYTE_OFFSET    40U
#define LIN_LI1_FR_CRUD_OpDone_BIT_OFFSET    0U
#define LIN_LI1_FR_CRUD_OpDone_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_OpDone_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_CRUD_STATE_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_STATE_BIT_OFFSET    0U
#define LIN_LI1_FR_CRUD_STATE_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_STATE_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET    38U
#define LIN_LI1_FR_CRUD_ActuatorState_BIT_OFFSET    4U
#define LIN_LI1_FR_CRUD_ActuatorState_SIGNAL_SIZE    12U
#define LIN_LI1_FR_CRUD_ActuatorState_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI1_FR_CRUD_VddReset_BYTE_OFFSET    40U
#define LIN_LI1_FR_CRUD_VddReset_BIT_OFFSET    1U
#define LIN_LI1_FR_CRUD_VddReset_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_VddReset_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_CRUD_Steploss_BYTE_OFFSET    40U
#define LIN_LI1_FR_CRUD_Steploss_BIT_OFFSET    2U
#define LIN_LI1_FR_CRUD_Steploss_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_Steploss_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_CRUD_EIDef_BYTE_OFFSET    40U
#define LIN_LI1_FR_CRUD_EIDef_BIT_OFFSET    3U
#define LIN_LI1_FR_CRUD_EIDef_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_EIDef_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_CRUD_TSD_BYTE_OFFSET    40U
#define LIN_LI1_FR_CRUD_TSD_BIT_OFFSET    4U
#define LIN_LI1_FR_CRUD_TSD_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_TSD_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_CRUD_TW_BYTE_OFFSET    40U
#define LIN_LI1_FR_CRUD_TW_BIT_OFFSET    5U
#define LIN_LI1_FR_CRUD_TW_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_TW_FLAG_BYTE_OFFSET    18U
#define LIN_LI1_FR_CRUD_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_CRUD_Tinfo_BYTE_OFFSET    40U
#define LIN_LI1_FR_CRUD_Tinfo_BIT_OFFSET    6U
#define LIN_LI1_FR_CRUD_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI1_FR_CRUD_Tinfo_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI1_FR_CRUD_Sensor_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_Sensor_BIT_OFFSET    1U
#define LIN_LI1_FR_CRUD_Sensor_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_Sensor_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI1_FR_CRUD_OV_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_OV_BIT_OFFSET    2U
#define LIN_LI1_FR_CRUD_OV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_OV_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI1_FR_CRUD_UV_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_UV_BIT_OFFSET    3U
#define LIN_LI1_FR_CRUD_UV_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_UV_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI1_FR_CRUD_OPEN2_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_OPEN2_BIT_OFFSET    4U
#define LIN_LI1_FR_CRUD_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_OPEN2_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI1_FR_CRUD_OPEN1_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_OPEN1_BIT_OFFSET    5U
#define LIN_LI1_FR_CRUD_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_OPEN1_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI1_FR_CRUD_OVC2_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_OVC2_BIT_OFFSET    6U
#define LIN_LI1_FR_CRUD_OVC2_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_OVC2_FLAG_BYTE_OFFSET    19U
#define LIN_LI1_FR_CRUD_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI1_FR_CRUD_OVC1_BYTE_OFFSET    41U
#define LIN_LI1_FR_CRUD_OVC1_BIT_OFFSET    7U
#define LIN_LI1_FR_CRUD_OVC1_SIGNAL_SIZE    1U
#define LIN_LI1_FR_CRUD_OVC1_FLAG_BYTE_OFFSET    20U
#define LIN_LI1_FR_CRUD_OVC1_FLAG_BIT_OFFSET    0U




#define LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET    52U
#define LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_BIT_OFFSET    0U
#define LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_SIGNAL_SIZE    7U
#define LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET    0U

#define LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET    77U
#define LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BIT_OFFSET    1U
#define LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_SIGNAL_SIZE    7U
#define LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET    41U
#define LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET    2U


#define LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET    52U
#define LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET    7U
#define LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_SIGNAL_SIZE    1U
#define LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET    1U

#define LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET    77U
#define LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET    0U
#define LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_SIGNAL_SIZE    1U
#define LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET    41U
#define LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET    1U


#define LIN_LI2_EVNT_REAR_LH_SPEED_BYTE_OFFSET    53U
#define LIN_LI2_EVNT_REAR_LH_SPEED_BIT_OFFSET    4U
#define LIN_LI2_EVNT_REAR_LH_SPEED_SIGNAL_SIZE    4U
#define LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BIT_OFFSET    3U


#define LIN_LI2_EVNT_REAR_RH_SPEED_BYTE_OFFSET    53U
#define LIN_LI2_EVNT_REAR_RH_SPEED_BIT_OFFSET    0U
#define LIN_LI2_EVNT_REAR_RH_SPEED_SIGNAL_SIZE    4U
#define LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BIT_OFFSET    2U


#define LIN_LI2_EVNT_CMD_BYTE_OFFSET    76U
#define LIN_LI2_EVNT_CMD_BIT_OFFSET    0U
#define LIN_LI2_EVNT_CMD_SIGNAL_SIZE    8U
#define LIN_LI2_EVNT_CMD_FLAG_BYTE_OFFSET    41U
#define LIN_LI2_EVNT_CMD_FLAG_BIT_OFFSET    0U


#define LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET    54U
#define LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BIT_OFFSET    0U
#define LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_SIGNAL_SIZE    11U
#define LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET    4U


#define LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET    55U
#define LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BIT_OFFSET    5U
#define LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_SIGNAL_SIZE    11U
#define LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET    5U


#define LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET    57U
#define LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BIT_OFFSET    0U
#define LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_SIGNAL_SIZE    11U
#define LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET    6U


#define LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET    58U
#define LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BIT_OFFSET    5U
#define LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_SIGNAL_SIZE    11U
#define LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET    28U
#define LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CLLR_SPEED_BYTE_OFFSET    60U
#define LIN_LI2_RR_CLLR_SPEED_BIT_OFFSET    0U
#define LIN_LI2_RR_CLLR_SPEED_SIGNAL_SIZE    4U
#define LIN_LI2_RR_CLLR_SPEED_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CLLR_OpDone_BYTE_OFFSET    62U
#define LIN_LI2_RR_CLLR_OpDone_BIT_OFFSET    0U
#define LIN_LI2_RR_CLLR_OpDone_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_OpDone_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CLLR_STATE_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_STATE_BIT_OFFSET    0U
#define LIN_LI2_RR_CLLR_STATE_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_STATE_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET    60U
#define LIN_LI2_RR_CLLR_ActuatorState_BIT_OFFSET    5U
#define LIN_LI2_RR_CLLR_ActuatorState_SIGNAL_SIZE    11U
#define LIN_LI2_RR_CLLR_ActuatorState_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CLLR_VddReset_BYTE_OFFSET    62U
#define LIN_LI2_RR_CLLR_VddReset_BIT_OFFSET    1U
#define LIN_LI2_RR_CLLR_VddReset_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_VddReset_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CLLR_Steploss_BYTE_OFFSET    62U
#define LIN_LI2_RR_CLLR_Steploss_BIT_OFFSET    2U
#define LIN_LI2_RR_CLLR_Steploss_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_Steploss_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CLLR_EIDef_BYTE_OFFSET    62U
#define LIN_LI2_RR_CLLR_EIDef_BIT_OFFSET    3U
#define LIN_LI2_RR_CLLR_EIDef_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_EIDef_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CLLR_TSD_BYTE_OFFSET    62U
#define LIN_LI2_RR_CLLR_TSD_BIT_OFFSET    4U
#define LIN_LI2_RR_CLLR_TSD_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_TSD_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CLLR_TW_BYTE_OFFSET    62U
#define LIN_LI2_RR_CLLR_TW_BIT_OFFSET    5U
#define LIN_LI2_RR_CLLR_TW_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_TW_FLAG_BYTE_OFFSET    29U
#define LIN_LI2_RR_CLLR_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CLLR_Tinfo_BYTE_OFFSET    62U
#define LIN_LI2_RR_CLLR_Tinfo_BIT_OFFSET    6U
#define LIN_LI2_RR_CLLR_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI2_RR_CLLR_Tinfo_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CLLR_Sensor_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_Sensor_BIT_OFFSET    1U
#define LIN_LI2_RR_CLLR_Sensor_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_Sensor_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CLLR_OV_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_OV_BIT_OFFSET    2U
#define LIN_LI2_RR_CLLR_OV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_OV_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CLLR_UV_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_UV_BIT_OFFSET    3U
#define LIN_LI2_RR_CLLR_UV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_UV_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CLLR_OPEN2_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_OPEN2_BIT_OFFSET    4U
#define LIN_LI2_RR_CLLR_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_OPEN2_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CLLR_OPEN1_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_OPEN1_BIT_OFFSET    5U
#define LIN_LI2_RR_CLLR_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_OPEN1_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CLLR_OVC2_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_OVC2_BIT_OFFSET    6U
#define LIN_LI2_RR_CLLR_OVC2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_OVC2_FLAG_BYTE_OFFSET    30U
#define LIN_LI2_RR_CLLR_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CLLR_OVC1_BYTE_OFFSET    63U
#define LIN_LI2_RR_CLLR_OVC1_BIT_OFFSET    7U
#define LIN_LI2_RR_CLLR_OVC1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLLR_OVC1_FLAG_BYTE_OFFSET    31U
#define LIN_LI2_RR_CLLR_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CRLR_SPEED_BYTE_OFFSET    68U
#define LIN_LI2_RR_CRLR_SPEED_BIT_OFFSET    0U
#define LIN_LI2_RR_CRLR_SPEED_SIGNAL_SIZE    4U
#define LIN_LI2_RR_CRLR_SPEED_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CRLR_OpDone_BYTE_OFFSET    70U
#define LIN_LI2_RR_CRLR_OpDone_BIT_OFFSET    0U
#define LIN_LI2_RR_CRLR_OpDone_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_OpDone_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CRLR_STATE_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_STATE_BIT_OFFSET    0U
#define LIN_LI2_RR_CRLR_STATE_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_STATE_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET    68U
#define LIN_LI2_RR_CRLR_ActuatorState_BIT_OFFSET    5U
#define LIN_LI2_RR_CRLR_ActuatorState_SIGNAL_SIZE    11U
#define LIN_LI2_RR_CRLR_ActuatorState_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CRLR_VddReset_BYTE_OFFSET    70U
#define LIN_LI2_RR_CRLR_VddReset_BIT_OFFSET    1U
#define LIN_LI2_RR_CRLR_VddReset_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_VddReset_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CRLR_Steploss_BYTE_OFFSET    70U
#define LIN_LI2_RR_CRLR_Steploss_BIT_OFFSET    2U
#define LIN_LI2_RR_CRLR_Steploss_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_Steploss_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CRLR_EIDef_BYTE_OFFSET    70U
#define LIN_LI2_RR_CRLR_EIDef_BIT_OFFSET    3U
#define LIN_LI2_RR_CRLR_EIDef_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_EIDef_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CRLR_TSD_BYTE_OFFSET    70U
#define LIN_LI2_RR_CRLR_TSD_BIT_OFFSET    4U
#define LIN_LI2_RR_CRLR_TSD_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_TSD_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CRLR_TW_BYTE_OFFSET    70U
#define LIN_LI2_RR_CRLR_TW_BIT_OFFSET    5U
#define LIN_LI2_RR_CRLR_TW_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_TW_FLAG_BYTE_OFFSET    35U
#define LIN_LI2_RR_CRLR_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CRLR_Tinfo_BYTE_OFFSET    70U
#define LIN_LI2_RR_CRLR_Tinfo_BIT_OFFSET    6U
#define LIN_LI2_RR_CRLR_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI2_RR_CRLR_Tinfo_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CRLR_Sensor_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_Sensor_BIT_OFFSET    1U
#define LIN_LI2_RR_CRLR_Sensor_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_Sensor_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CRLR_OV_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_OV_BIT_OFFSET    2U
#define LIN_LI2_RR_CRLR_OV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_OV_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CRLR_UV_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_UV_BIT_OFFSET    3U
#define LIN_LI2_RR_CRLR_UV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_UV_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CRLR_OPEN2_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_OPEN2_BIT_OFFSET    4U
#define LIN_LI2_RR_CRLR_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_OPEN2_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CRLR_OPEN1_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_OPEN1_BIT_OFFSET    5U
#define LIN_LI2_RR_CRLR_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_OPEN1_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CRLR_OVC2_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_OVC2_BIT_OFFSET    6U
#define LIN_LI2_RR_CRLR_OVC2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_OVC2_FLAG_BYTE_OFFSET    36U
#define LIN_LI2_RR_CRLR_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CRLR_OVC1_BYTE_OFFSET    71U
#define LIN_LI2_RR_CRLR_OVC1_BIT_OFFSET    7U
#define LIN_LI2_RR_CRLR_OVC1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRLR_OVC1_FLAG_BYTE_OFFSET    37U
#define LIN_LI2_RR_CRLR_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CLUD_SPEED_BYTE_OFFSET    64U
#define LIN_LI2_RR_CLUD_SPEED_BIT_OFFSET    0U
#define LIN_LI2_RR_CLUD_SPEED_SIGNAL_SIZE    4U
#define LIN_LI2_RR_CLUD_SPEED_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CLUD_OpDone_BYTE_OFFSET    66U
#define LIN_LI2_RR_CLUD_OpDone_BIT_OFFSET    0U
#define LIN_LI2_RR_CLUD_OpDone_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_OpDone_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CLUD_STATE_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_STATE_BIT_OFFSET    0U
#define LIN_LI2_RR_CLUD_STATE_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_STATE_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET    64U
#define LIN_LI2_RR_CLUD_ActuatorState_BIT_OFFSET    5U
#define LIN_LI2_RR_CLUD_ActuatorState_SIGNAL_SIZE    11U
#define LIN_LI2_RR_CLUD_ActuatorState_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CLUD_VddReset_BYTE_OFFSET    66U
#define LIN_LI2_RR_CLUD_VddReset_BIT_OFFSET    1U
#define LIN_LI2_RR_CLUD_VddReset_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_VddReset_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CLUD_Steploss_BYTE_OFFSET    66U
#define LIN_LI2_RR_CLUD_Steploss_BIT_OFFSET    2U
#define LIN_LI2_RR_CLUD_Steploss_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_Steploss_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CLUD_EIDef_BYTE_OFFSET    66U
#define LIN_LI2_RR_CLUD_EIDef_BIT_OFFSET    3U
#define LIN_LI2_RR_CLUD_EIDef_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_EIDef_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CLUD_TSD_BYTE_OFFSET    66U
#define LIN_LI2_RR_CLUD_TSD_BIT_OFFSET    4U
#define LIN_LI2_RR_CLUD_TSD_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_TSD_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CLUD_TW_BYTE_OFFSET    66U
#define LIN_LI2_RR_CLUD_TW_BIT_OFFSET    5U
#define LIN_LI2_RR_CLUD_TW_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_TW_FLAG_BYTE_OFFSET    32U
#define LIN_LI2_RR_CLUD_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CLUD_Tinfo_BYTE_OFFSET    66U
#define LIN_LI2_RR_CLUD_Tinfo_BIT_OFFSET    6U
#define LIN_LI2_RR_CLUD_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI2_RR_CLUD_Tinfo_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CLUD_Sensor_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_Sensor_BIT_OFFSET    1U
#define LIN_LI2_RR_CLUD_Sensor_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_Sensor_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CLUD_OV_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_OV_BIT_OFFSET    2U
#define LIN_LI2_RR_CLUD_OV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_OV_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CLUD_UV_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_UV_BIT_OFFSET    3U
#define LIN_LI2_RR_CLUD_UV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_UV_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CLUD_OPEN2_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_OPEN2_BIT_OFFSET    4U
#define LIN_LI2_RR_CLUD_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_OPEN2_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CLUD_OPEN1_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_OPEN1_BIT_OFFSET    5U
#define LIN_LI2_RR_CLUD_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_OPEN1_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CLUD_OVC2_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_OVC2_BIT_OFFSET    6U
#define LIN_LI2_RR_CLUD_OVC2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_OVC2_FLAG_BYTE_OFFSET    33U
#define LIN_LI2_RR_CLUD_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CLUD_OVC1_BYTE_OFFSET    67U
#define LIN_LI2_RR_CLUD_OVC1_BIT_OFFSET    7U
#define LIN_LI2_RR_CLUD_OVC1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CLUD_OVC1_FLAG_BYTE_OFFSET    34U
#define LIN_LI2_RR_CLUD_OVC1_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CRUD_SPEED_BYTE_OFFSET    72U
#define LIN_LI2_RR_CRUD_SPEED_BIT_OFFSET    0U
#define LIN_LI2_RR_CRUD_SPEED_SIGNAL_SIZE    4U
#define LIN_LI2_RR_CRUD_SPEED_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_SPEED_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CRUD_OpDone_BYTE_OFFSET    74U
#define LIN_LI2_RR_CRUD_OpDone_BIT_OFFSET    0U
#define LIN_LI2_RR_CRUD_OpDone_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_OpDone_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_OpDone_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CRUD_STATE_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_STATE_BIT_OFFSET    0U
#define LIN_LI2_RR_CRUD_STATE_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_STATE_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_STATE_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET    72U
#define LIN_LI2_RR_CRUD_ActuatorState_BIT_OFFSET    5U
#define LIN_LI2_RR_CRUD_ActuatorState_SIGNAL_SIZE    11U
#define LIN_LI2_RR_CRUD_ActuatorState_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_ActuatorState_FLAG_BIT_OFFSET    1U


#define LIN_LI2_RR_CRUD_VddReset_BYTE_OFFSET    74U
#define LIN_LI2_RR_CRUD_VddReset_BIT_OFFSET    1U
#define LIN_LI2_RR_CRUD_VddReset_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_VddReset_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_VddReset_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CRUD_Steploss_BYTE_OFFSET    74U
#define LIN_LI2_RR_CRUD_Steploss_BIT_OFFSET    2U
#define LIN_LI2_RR_CRUD_Steploss_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_Steploss_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_Steploss_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CRUD_EIDef_BYTE_OFFSET    74U
#define LIN_LI2_RR_CRUD_EIDef_BIT_OFFSET    3U
#define LIN_LI2_RR_CRUD_EIDef_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_EIDef_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_EIDef_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CRUD_TSD_BYTE_OFFSET    74U
#define LIN_LI2_RR_CRUD_TSD_BIT_OFFSET    4U
#define LIN_LI2_RR_CRUD_TSD_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_TSD_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_TSD_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CRUD_TW_BYTE_OFFSET    74U
#define LIN_LI2_RR_CRUD_TW_BIT_OFFSET    5U
#define LIN_LI2_RR_CRUD_TW_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_TW_FLAG_BYTE_OFFSET    38U
#define LIN_LI2_RR_CRUD_TW_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CRUD_Tinfo_BYTE_OFFSET    74U
#define LIN_LI2_RR_CRUD_Tinfo_BIT_OFFSET    6U
#define LIN_LI2_RR_CRUD_Tinfo_SIGNAL_SIZE    2U
#define LIN_LI2_RR_CRUD_Tinfo_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_Tinfo_FLAG_BIT_OFFSET    0U


#define LIN_LI2_RR_CRUD_Sensor_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_Sensor_BIT_OFFSET    1U
#define LIN_LI2_RR_CRUD_Sensor_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_Sensor_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_Sensor_FLAG_BIT_OFFSET    2U


#define LIN_LI2_RR_CRUD_OV_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_OV_BIT_OFFSET    2U
#define LIN_LI2_RR_CRUD_OV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_OV_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_OV_FLAG_BIT_OFFSET    3U


#define LIN_LI2_RR_CRUD_UV_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_UV_BIT_OFFSET    3U
#define LIN_LI2_RR_CRUD_UV_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_UV_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_UV_FLAG_BIT_OFFSET    4U


#define LIN_LI2_RR_CRUD_OPEN2_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_OPEN2_BIT_OFFSET    4U
#define LIN_LI2_RR_CRUD_OPEN2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_OPEN2_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_OPEN2_FLAG_BIT_OFFSET    5U


#define LIN_LI2_RR_CRUD_OPEN1_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_OPEN1_BIT_OFFSET    5U
#define LIN_LI2_RR_CRUD_OPEN1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_OPEN1_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_OPEN1_FLAG_BIT_OFFSET    6U


#define LIN_LI2_RR_CRUD_OVC2_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_OVC2_BIT_OFFSET    6U
#define LIN_LI2_RR_CRUD_OVC2_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_OVC2_FLAG_BYTE_OFFSET    39U
#define LIN_LI2_RR_CRUD_OVC2_FLAG_BIT_OFFSET    7U


#define LIN_LI2_RR_CRUD_OVC1_BYTE_OFFSET    75U
#define LIN_LI2_RR_CRUD_OVC1_BIT_OFFSET    7U
#define LIN_LI2_RR_CRUD_OVC1_SIGNAL_SIZE    1U
#define LIN_LI2_RR_CRUD_OVC1_FLAG_BYTE_OFFSET    40U
#define LIN_LI2_RR_CRUD_OVC1_FLAG_BIT_OFFSET    0U



/**********************************************************************/
/***************        Static API Functions        *******************/
/**********************************************************************/
/*
 * the static signal access macros
 */


 
/* static access macros for signal LI0_EVNT_ADDr */
 
#define l_u8_rd_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_rd_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_wr_LI0_EVNT_ADDr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET); \
    } \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET); \
    } \


/* static access macros for signal LI0_EVNT_Broad */

 
#define l_bool_rd_LI0_EVNT_Broad_EVNT_MASTER_COMMAND() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET))

#define l_bool_rd_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET))

#define l_bool_wr_LI0_EVNT_Broad(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

 
/* static access macros for signal LI0_EVNT_SPEED */
 
#define l_u8_rd_LI0_EVNT_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_EVNT_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_SPEED_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EVNT_CMD */
 
#define l_u8_rd_LI0_EVNT_CMD() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_CMD_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_EVNT_CMD(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_CMD_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_CMD_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_CMD_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition */
 
#define l_u16_rd_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition(A) \
    { \
    g_buffer_backup_data[1U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << 1); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[1U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << (1 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] &= (~(0x03 << 1)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EVNT_Front_Side_LH_UpDown_TargetPosition */
 
#define l_u16_rd_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xfffU))


#define l_u16_wr_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition(A) \
    { \
    g_buffer_backup_data[3U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << 3); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[3U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << (3 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] & 0xf0U) | \
    (((A) >> 8U) & 0x0fU)); \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] &= (~(0x03 << 3)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition */
 
#define l_u16_rd_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EVNT_Front_Center_LH_UpDown_TargetPosition */
 
#define l_u16_rd_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xfffU))


#define l_u16_wr_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition(A) \
    { \
    g_buffer_backup_data[6U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << 6); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[6U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] |= (1U << (6 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] & 0xf0U) | \
    (((A) >> 8U) & 0x0fU)); \
    g_lin_frame_updating_flag_tbl[LI0_EVNT_MASTER_COMMAND] &= (~(0x03 << 6)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_FR_SLLR_SPEED */
 
#define l_u8_rd_LI0_FR_SLLR_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_FR_SLLR_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_SLLR_OpDone */

 
#define l_bool_rd_LI0_FR_SLLR_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OpDone_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_STATE */

 
#define l_bool_rd_LI0_FR_SLLR_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_STATE_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_SLLR_ActuatorState */
 
#define l_u16_rd_LI0_FR_SLLR_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_FR_SLLR_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_SLLR_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_SLLR_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_FR_SLLR_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_SLLR_VddReset */

 
#define l_bool_rd_LI0_FR_SLLR_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_VddReset_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_Steploss */

 
#define l_bool_rd_LI0_FR_SLLR_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_Steploss_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_EIDef */

 
#define l_bool_rd_LI0_FR_SLLR_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_EIDef_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_TSD */

 
#define l_bool_rd_LI0_FR_SLLR_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_TSD_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_TW */

 
#define l_bool_rd_LI0_FR_SLLR_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_TW_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_TW_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_TW_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_TW_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_SLLR_Tinfo */
 
#define l_u8_rd_LI0_FR_SLLR_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_FR_SLLR_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_SLLR_Sensor */

 
#define l_bool_rd_LI0_FR_SLLR_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_Sensor_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_OV */

 
#define l_bool_rd_LI0_FR_SLLR_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OV_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OV_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OV_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_UV */

 
#define l_bool_rd_LI0_FR_SLLR_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_UV_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_UV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_UV_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_UV_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_OPEN2 */

 
#define l_bool_rd_LI0_FR_SLLR_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_OPEN1 */

 
#define l_bool_rd_LI0_FR_SLLR_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_OVC2 */

 
#define l_bool_rd_LI0_FR_SLLR_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OVC2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLLR_OVC1 */

 
#define l_bool_rd_LI0_FR_SLLR_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OVC1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLLR_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLLR_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_SLLR_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_CLLR_SPEED */
 
#define l_u8_rd_LI0_FR_CLLR_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_FR_CLLR_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_CLLR_OpDone */

 
#define l_bool_rd_LI0_FR_CLLR_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OpDone_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_STATE */

 
#define l_bool_rd_LI0_FR_CLLR_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_STATE_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_CLLR_ActuatorState */
 
#define l_u16_rd_LI0_FR_CLLR_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_FR_CLLR_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_CLLR_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_CLLR_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_FR_CLLR_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_CLLR_VddReset */

 
#define l_bool_rd_LI0_FR_CLLR_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_VddReset_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_Steploss */

 
#define l_bool_rd_LI0_FR_CLLR_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_Steploss_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_EIDef */

 
#define l_bool_rd_LI0_FR_CLLR_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_EIDef_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_TSD */

 
#define l_bool_rd_LI0_FR_CLLR_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_TSD_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_TW */

 
#define l_bool_rd_LI0_FR_CLLR_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_TW_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_TW_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_TW_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_TW_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_CLLR_Tinfo */
 
#define l_u8_rd_LI0_FR_CLLR_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_FR_CLLR_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_CLLR_Sensor */

 
#define l_bool_rd_LI0_FR_CLLR_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_Sensor_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_OV */

 
#define l_bool_rd_LI0_FR_CLLR_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OV_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OV_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OV_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_UV */

 
#define l_bool_rd_LI0_FR_CLLR_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_UV_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_UV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_UV_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_UV_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_OPEN2 */

 
#define l_bool_rd_LI0_FR_CLLR_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_OPEN1 */

 
#define l_bool_rd_LI0_FR_CLLR_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_OVC2 */

 
#define l_bool_rd_LI0_FR_CLLR_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OVC2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLLR_OVC1 */

 
#define l_bool_rd_LI0_FR_CLLR_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OVC1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLLR_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLLR_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_CLLR_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_SLUD_SPEED */
 
#define l_u8_rd_LI0_FR_SLUD_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_FR_SLUD_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_SLUD_OpDone */

 
#define l_bool_rd_LI0_FR_SLUD_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OpDone_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_STATE */

 
#define l_bool_rd_LI0_FR_SLUD_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_STATE_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_SLUD_ActuatorState */
 
#define l_u16_rd_LI0_FR_SLUD_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_FR_SLUD_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_SLUD_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_SLUD_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_FR_SLUD_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_SLUD_VddReset */

 
#define l_bool_rd_LI0_FR_SLUD_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_VddReset_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_Steploss */

 
#define l_bool_rd_LI0_FR_SLUD_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_Steploss_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_EIDef */

 
#define l_bool_rd_LI0_FR_SLUD_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_EIDef_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_TSD */

 
#define l_bool_rd_LI0_FR_SLUD_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_TSD_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_TW */

 
#define l_bool_rd_LI0_FR_SLUD_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_TW_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_TW_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_TW_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_TW_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_SLUD_Tinfo */
 
#define l_u8_rd_LI0_FR_SLUD_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_FR_SLUD_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_SLUD_Sensor */

 
#define l_bool_rd_LI0_FR_SLUD_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_Sensor_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_OV */

 
#define l_bool_rd_LI0_FR_SLUD_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OV_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OV_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OV_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_UV */

 
#define l_bool_rd_LI0_FR_SLUD_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_UV_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_UV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_UV_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_UV_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_OPEN2 */

 
#define l_bool_rd_LI0_FR_SLUD_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_OPEN1 */

 
#define l_bool_rd_LI0_FR_SLUD_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_OVC2 */

 
#define l_bool_rd_LI0_FR_SLUD_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OVC2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_SLUD_OVC1 */

 
#define l_bool_rd_LI0_FR_SLUD_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OVC1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_SLUD_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_SLUD_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_SLUD_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_CLUD_SPEED */
 
#define l_u8_rd_LI0_FR_CLUD_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_FR_CLUD_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_CLUD_OpDone */

 
#define l_bool_rd_LI0_FR_CLUD_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OpDone_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OpDone_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_STATE */

 
#define l_bool_rd_LI0_FR_CLUD_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_STATE_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_STATE_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_CLUD_ActuatorState */
 
#define l_u16_rd_LI0_FR_CLUD_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_FR_CLUD_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_CLUD_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_FR_CLUD_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_FR_CLUD_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_CLUD_VddReset */

 
#define l_bool_rd_LI0_FR_CLUD_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_VddReset_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_VddReset_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_Steploss */

 
#define l_bool_rd_LI0_FR_CLUD_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_Steploss_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Steploss_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_EIDef */

 
#define l_bool_rd_LI0_FR_CLUD_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_EIDef_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_EIDef_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_TSD */

 
#define l_bool_rd_LI0_FR_CLUD_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_TSD_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_TSD_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_TW */

 
#define l_bool_rd_LI0_FR_CLUD_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_TW_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_TW_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_TW_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_TW_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_FR_CLUD_Tinfo */
 
#define l_u8_rd_LI0_FR_CLUD_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_FR_CLUD_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_FR_CLUD_Sensor */

 
#define l_bool_rd_LI0_FR_CLUD_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_Sensor_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_Sensor_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_OV */

 
#define l_bool_rd_LI0_FR_CLUD_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OV_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OV_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OV_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_UV */

 
#define l_bool_rd_LI0_FR_CLUD_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_UV_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_UV_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_UV_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_UV_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_OPEN2 */

 
#define l_bool_rd_LI0_FR_CLUD_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_OPEN1 */

 
#define l_bool_rd_LI0_FR_CLUD_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_OVC2 */

 
#define l_bool_rd_LI0_FR_CLUD_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OVC2_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OVC2_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_FR_CLUD_OVC1 */

 
#define l_bool_rd_LI0_FR_CLUD_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OVC1_BIT_OFFSET))

#define l_bool_wr_LI0_FR_CLUD_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_FR_CLUD_OVC1_BYTE_OFFSET], \
    LIN_LI0_FR_CLUD_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OVC1_FLAG_BIT_OFFSET);}


 
/* static access macros for signal LI1_EVNT_ADDr */
 
#define l_u8_rd_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_rd_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_wr_LI1_EVNT_ADDr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET); \
    } \
    { \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET); \
    } \


/* static access macros for signal LI1_EVNT_Broad */

 
#define l_bool_rd_LI1_EVNT_Broad_EVNT_MASTER_COMMAND() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET))

#define l_bool_rd_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET))

#define l_bool_wr_LI1_EVNT_Broad(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

 
/* static access macros for signal LI1_EVNT_SPEED */
 
#define l_u8_rd_LI1_EVNT_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI1_EVNT_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_SPEED_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI1_EVNT_CMD */
 
#define l_u8_rd_LI1_EVNT_CMD() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_CMD_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI1_EVNT_CMD(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_CMD_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_CMD_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_CMD_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition */
 
#define l_u16_rd_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI1_EVNT_Front_Side_RH_UpDown_TargetPosition */
 
#define l_u16_rd_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xfffU))


#define l_u16_wr_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition(A) \
    { \
    g_buffer_backup_data[6U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << 6); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[6U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << (6 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] & 0xf0U) | \
    (((A) >> 8U) & 0x0fU)); \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] &= (~(0x03 << 6)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition */
 
#define l_u16_rd_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition(A) \
    { \
    g_buffer_backup_data[1U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << 1); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[1U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << (1 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] &= (~(0x03 << 1)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI1_EVNT_Front_Center_RH_UpDown_TargetPosition */
 
#define l_u16_rd_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xfffU))


#define l_u16_wr_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition(A) \
    { \
    g_buffer_backup_data[3U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << 3); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[3U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] |= (1U << (3 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] & 0xf0U) | \
    (((A) >> 8U) & 0x0fU)); \
    g_lin_frame_updating_flag_tbl[LI1_EVNT_MASTER_COMMAND] &= (~(0x03 << 3)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI1_FR_SRLR_SPEED */
 
#define l_u8_rd_LI1_FR_SRLR_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI1_FR_SRLR_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_SRLR_OpDone */

 
#define l_bool_rd_LI1_FR_SRLR_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OpDone_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_STATE */

 
#define l_bool_rd_LI1_FR_SRLR_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_STATE_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_SRLR_ActuatorState */
 
#define l_u16_rd_LI1_FR_SRLR_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI1_FR_SRLR_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_SRLR_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_SRLR_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI1_FR_SRLR_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_SRLR_VddReset */

 
#define l_bool_rd_LI1_FR_SRLR_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_VddReset_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_Steploss */

 
#define l_bool_rd_LI1_FR_SRLR_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_Steploss_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_EIDef */

 
#define l_bool_rd_LI1_FR_SRLR_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_EIDef_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_TSD */

 
#define l_bool_rd_LI1_FR_SRLR_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_TSD_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_TW */

 
#define l_bool_rd_LI1_FR_SRLR_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_TW_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_TW_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_TW_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_TW_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_SRLR_Tinfo */
 
#define l_u8_rd_LI1_FR_SRLR_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI1_FR_SRLR_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_SRLR_Sensor */

 
#define l_bool_rd_LI1_FR_SRLR_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_Sensor_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_OV */

 
#define l_bool_rd_LI1_FR_SRLR_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OV_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OV_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OV_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_UV */

 
#define l_bool_rd_LI1_FR_SRLR_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_UV_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_UV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_UV_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_UV_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_OPEN2 */

 
#define l_bool_rd_LI1_FR_SRLR_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_OPEN1 */

 
#define l_bool_rd_LI1_FR_SRLR_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_OVC2 */

 
#define l_bool_rd_LI1_FR_SRLR_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OVC2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRLR_OVC1 */

 
#define l_bool_rd_LI1_FR_SRLR_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OVC1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRLR_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRLR_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_SRLR_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_CRLR_SPEED */
 
#define l_u8_rd_LI1_FR_CRLR_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI1_FR_CRLR_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_CRLR_OpDone */

 
#define l_bool_rd_LI1_FR_CRLR_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OpDone_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_STATE */

 
#define l_bool_rd_LI1_FR_CRLR_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_STATE_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_CRLR_ActuatorState */
 
#define l_u16_rd_LI1_FR_CRLR_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI1_FR_CRLR_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_CRLR_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_CRLR_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI1_FR_CRLR_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_CRLR_VddReset */

 
#define l_bool_rd_LI1_FR_CRLR_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_VddReset_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_Steploss */

 
#define l_bool_rd_LI1_FR_CRLR_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_Steploss_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_EIDef */

 
#define l_bool_rd_LI1_FR_CRLR_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_EIDef_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_TSD */

 
#define l_bool_rd_LI1_FR_CRLR_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_TSD_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_TW */

 
#define l_bool_rd_LI1_FR_CRLR_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_TW_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_TW_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_TW_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_TW_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_CRLR_Tinfo */
 
#define l_u8_rd_LI1_FR_CRLR_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI1_FR_CRLR_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_CRLR_Sensor */

 
#define l_bool_rd_LI1_FR_CRLR_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_Sensor_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_OV */

 
#define l_bool_rd_LI1_FR_CRLR_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OV_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OV_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OV_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_UV */

 
#define l_bool_rd_LI1_FR_CRLR_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_UV_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_UV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_UV_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_UV_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_OPEN2 */

 
#define l_bool_rd_LI1_FR_CRLR_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_OPEN1 */

 
#define l_bool_rd_LI1_FR_CRLR_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_OVC2 */

 
#define l_bool_rd_LI1_FR_CRLR_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OVC2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRLR_OVC1 */

 
#define l_bool_rd_LI1_FR_CRLR_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OVC1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRLR_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRLR_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_CRLR_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_SRUD_SPEED */
 
#define l_u8_rd_LI1_FR_SRUD_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI1_FR_SRUD_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_SRUD_OpDone */

 
#define l_bool_rd_LI1_FR_SRUD_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OpDone_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_STATE */

 
#define l_bool_rd_LI1_FR_SRUD_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_STATE_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_SRUD_ActuatorState */
 
#define l_u16_rd_LI1_FR_SRUD_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI1_FR_SRUD_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_SRUD_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_SRUD_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI1_FR_SRUD_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_SRUD_VddReset */

 
#define l_bool_rd_LI1_FR_SRUD_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_VddReset_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_Steploss */

 
#define l_bool_rd_LI1_FR_SRUD_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_Steploss_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_EIDef */

 
#define l_bool_rd_LI1_FR_SRUD_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_EIDef_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_TSD */

 
#define l_bool_rd_LI1_FR_SRUD_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_TSD_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_TW */

 
#define l_bool_rd_LI1_FR_SRUD_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_TW_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_TW_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_TW_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_TW_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_SRUD_Tinfo */
 
#define l_u8_rd_LI1_FR_SRUD_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI1_FR_SRUD_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_SRUD_Sensor */

 
#define l_bool_rd_LI1_FR_SRUD_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_Sensor_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_OV */

 
#define l_bool_rd_LI1_FR_SRUD_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OV_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OV_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OV_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_UV */

 
#define l_bool_rd_LI1_FR_SRUD_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_UV_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_UV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_UV_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_UV_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_OPEN2 */

 
#define l_bool_rd_LI1_FR_SRUD_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_OPEN1 */

 
#define l_bool_rd_LI1_FR_SRUD_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_OVC2 */

 
#define l_bool_rd_LI1_FR_SRUD_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OVC2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_SRUD_OVC1 */

 
#define l_bool_rd_LI1_FR_SRUD_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OVC1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_SRUD_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_SRUD_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_SRUD_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_CRUD_SPEED */
 
#define l_u8_rd_LI1_FR_CRUD_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI1_FR_CRUD_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_CRUD_OpDone */

 
#define l_bool_rd_LI1_FR_CRUD_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OpDone_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OpDone_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_STATE */

 
#define l_bool_rd_LI1_FR_CRUD_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_STATE_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_STATE_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_CRUD_ActuatorState */
 
#define l_u16_rd_LI1_FR_CRUD_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI1_FR_CRUD_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_CRUD_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI1_FR_CRUD_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI1_FR_CRUD_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_CRUD_VddReset */

 
#define l_bool_rd_LI1_FR_CRUD_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_VddReset_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_VddReset_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_Steploss */

 
#define l_bool_rd_LI1_FR_CRUD_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_Steploss_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Steploss_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_EIDef */

 
#define l_bool_rd_LI1_FR_CRUD_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_EIDef_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_EIDef_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_TSD */

 
#define l_bool_rd_LI1_FR_CRUD_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_TSD_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_TSD_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_TW */

 
#define l_bool_rd_LI1_FR_CRUD_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_TW_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_TW_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_TW_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_TW_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI1_FR_CRUD_Tinfo */
 
#define l_u8_rd_LI1_FR_CRUD_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI1_FR_CRUD_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI1_FR_CRUD_Sensor */

 
#define l_bool_rd_LI1_FR_CRUD_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_Sensor_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_Sensor_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_OV */

 
#define l_bool_rd_LI1_FR_CRUD_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OV_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OV_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OV_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_UV */

 
#define l_bool_rd_LI1_FR_CRUD_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_UV_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_UV_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_UV_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_UV_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_OPEN2 */

 
#define l_bool_rd_LI1_FR_CRUD_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_OPEN1 */

 
#define l_bool_rd_LI1_FR_CRUD_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_OVC2 */

 
#define l_bool_rd_LI1_FR_CRUD_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OVC2_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OVC2_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI1_FR_CRUD_OVC1 */

 
#define l_bool_rd_LI1_FR_CRUD_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OVC1_BIT_OFFSET))

#define l_bool_wr_LI1_FR_CRUD_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI1_FR_CRUD_OVC1_BYTE_OFFSET], \
    LIN_LI1_FR_CRUD_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OVC1_FLAG_BIT_OFFSET);}


 
/* static access macros for signal LI2_EVNT_ADDr */
 
#define l_u8_rd_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_rd_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET]) >> 1U) & 0x7fU))


#define l_u8_wr_LI2_EVNT_ADDr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET); \
    } \
    { \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_BYTE_OFFSET] & 0x01U) | \
    (((A) << 1U) & 0xfeU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET); \
    } \


/* static access macros for signal LI2_EVNT_Broad */

 
#define l_bool_rd_LI2_EVNT_Broad_EVNT_MASTER_COMMAND() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET))

#define l_bool_rd_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET))

#define l_bool_wr_LI2_EVNT_Broad(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BYTE_OFFSET], \
    LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BYTE_OFFSET], \
    LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

 
/* static access macros for signal LI2_EVNT_REAR_LH_SPEED */
 
#define l_u8_rd_LI2_EVNT_REAR_LH_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_REAR_LH_SPEED_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI2_EVNT_REAR_LH_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_REAR_LH_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_REAR_LH_SPEED_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI2_EVNT_REAR_RH_SPEED */
 
#define l_u8_rd_LI2_EVNT_REAR_RH_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_REAR_RH_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI2_EVNT_REAR_RH_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_REAR_RH_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_REAR_RH_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI2_EVNT_CMD */
 
#define l_u8_rd_LI2_EVNT_CMD() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_CMD_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI2_EVNT_CMD(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_CMD_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_CMD_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_CMD_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition */
 
#define l_u16_rd_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0x7ffU))


#define l_u16_wr_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] & 0xf8U) | \
    (((A) >> 8U) & 0x07U)); \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition */
 
#define l_u16_rd_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 5U) & 0x7ffU))


#define l_u16_wr_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition(A) \
    { \
    g_buffer_backup_data[3U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << 3); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET] & 0x1fU) | \
    (((A) << 5U) & 0xe0U)); \
    g_buffer_backup_data[3U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << (3 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 3U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] &= (~(0x03 << 3)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition */
 
#define l_u16_rd_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0x7ffU))


#define l_u16_wr_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition(A) \
    { \
    g_buffer_backup_data[5U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << 5); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[5U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << (5 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_BYTE_OFFSET + 1U] & 0xf8U) | \
    (((A) >> 8U) & 0x07U)); \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] &= (~(0x03 << 5)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition */
 
#define l_u16_rd_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] << 8U)) >> 5U) & 0x7ffU))


#define l_u16_wr_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition(A) \
    { \
    g_buffer_backup_data[6U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << 6); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET] & 0x1fU) | \
    (((A) << 5U) & 0xe0U)); \
    g_buffer_backup_data[6U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] |= (1U << (6 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 3U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI2_EVNT_MASTER_COMMAND] &= (~(0x03 << 6)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI2_RR_CLLR_SPEED */
 
#define l_u8_rd_LI2_RR_CLLR_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI2_RR_CLLR_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CLLR_OpDone */

 
#define l_bool_rd_LI2_RR_CLLR_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OpDone_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_STATE */

 
#define l_bool_rd_LI2_RR_CLLR_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_STATE_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CLLR_ActuatorState */
 
#define l_u16_rd_LI2_RR_CLLR_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 5U) & 0x7ffU))


#define l_u16_wr_LI2_RR_CLLR_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CLLR_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET] & 0x1fU) | \
    (((A) << 5U) & 0xe0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CLLR_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 3U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI2_RR_CLLR_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CLLR_VddReset */

 
#define l_bool_rd_LI2_RR_CLLR_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_VddReset_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_Steploss */

 
#define l_bool_rd_LI2_RR_CLLR_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_Steploss_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_EIDef */

 
#define l_bool_rd_LI2_RR_CLLR_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_EIDef_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_TSD */

 
#define l_bool_rd_LI2_RR_CLLR_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_TSD_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_TW */

 
#define l_bool_rd_LI2_RR_CLLR_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_TW_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CLLR_Tinfo */
 
#define l_u8_rd_LI2_RR_CLLR_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI2_RR_CLLR_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CLLR_Sensor */

 
#define l_bool_rd_LI2_RR_CLLR_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_Sensor_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_OV */

 
#define l_bool_rd_LI2_RR_CLLR_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_UV */

 
#define l_bool_rd_LI2_RR_CLLR_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_UV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_OPEN2 */

 
#define l_bool_rd_LI2_RR_CLLR_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_OPEN1 */

 
#define l_bool_rd_LI2_RR_CLLR_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_OVC2 */

 
#define l_bool_rd_LI2_RR_CLLR_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OVC2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLLR_OVC1 */

 
#define l_bool_rd_LI2_RR_CLLR_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OVC1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLLR_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLLR_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CLLR_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CRLR_SPEED */
 
#define l_u8_rd_LI2_RR_CRLR_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI2_RR_CRLR_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CRLR_OpDone */

 
#define l_bool_rd_LI2_RR_CRLR_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OpDone_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_STATE */

 
#define l_bool_rd_LI2_RR_CRLR_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_STATE_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CRLR_ActuatorState */
 
#define l_u16_rd_LI2_RR_CRLR_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 5U) & 0x7ffU))


#define l_u16_wr_LI2_RR_CRLR_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CRLR_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET] & 0x1fU) | \
    (((A) << 5U) & 0xe0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CRLR_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 3U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI2_RR_CRLR_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CRLR_VddReset */

 
#define l_bool_rd_LI2_RR_CRLR_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_VddReset_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_Steploss */

 
#define l_bool_rd_LI2_RR_CRLR_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_Steploss_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_EIDef */

 
#define l_bool_rd_LI2_RR_CRLR_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_EIDef_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_TSD */

 
#define l_bool_rd_LI2_RR_CRLR_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_TSD_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_TW */

 
#define l_bool_rd_LI2_RR_CRLR_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_TW_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CRLR_Tinfo */
 
#define l_u8_rd_LI2_RR_CRLR_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI2_RR_CRLR_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CRLR_Sensor */

 
#define l_bool_rd_LI2_RR_CRLR_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_Sensor_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_OV */

 
#define l_bool_rd_LI2_RR_CRLR_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_UV */

 
#define l_bool_rd_LI2_RR_CRLR_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_UV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_OPEN2 */

 
#define l_bool_rd_LI2_RR_CRLR_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_OPEN1 */

 
#define l_bool_rd_LI2_RR_CRLR_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_OVC2 */

 
#define l_bool_rd_LI2_RR_CRLR_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OVC2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRLR_OVC1 */

 
#define l_bool_rd_LI2_RR_CRLR_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OVC1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRLR_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRLR_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CRLR_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CLUD_SPEED */
 
#define l_u8_rd_LI2_RR_CLUD_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI2_RR_CLUD_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CLUD_OpDone */

 
#define l_bool_rd_LI2_RR_CLUD_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OpDone_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_STATE */

 
#define l_bool_rd_LI2_RR_CLUD_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_STATE_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CLUD_ActuatorState */
 
#define l_u16_rd_LI2_RR_CLUD_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 5U) & 0x7ffU))


#define l_u16_wr_LI2_RR_CLUD_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CLUD_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET] & 0x1fU) | \
    (((A) << 5U) & 0xe0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CLUD_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 3U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI2_RR_CLUD_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CLUD_VddReset */

 
#define l_bool_rd_LI2_RR_CLUD_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_VddReset_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_Steploss */

 
#define l_bool_rd_LI2_RR_CLUD_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_Steploss_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_EIDef */

 
#define l_bool_rd_LI2_RR_CLUD_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_EIDef_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_TSD */

 
#define l_bool_rd_LI2_RR_CLUD_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_TSD_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_TW */

 
#define l_bool_rd_LI2_RR_CLUD_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_TW_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CLUD_Tinfo */
 
#define l_u8_rd_LI2_RR_CLUD_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI2_RR_CLUD_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CLUD_Sensor */

 
#define l_bool_rd_LI2_RR_CLUD_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_Sensor_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_OV */

 
#define l_bool_rd_LI2_RR_CLUD_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_UV */

 
#define l_bool_rd_LI2_RR_CLUD_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_UV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_OPEN2 */

 
#define l_bool_rd_LI2_RR_CLUD_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_OPEN1 */

 
#define l_bool_rd_LI2_RR_CLUD_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_OVC2 */

 
#define l_bool_rd_LI2_RR_CLUD_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OVC2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CLUD_OVC1 */

 
#define l_bool_rd_LI2_RR_CLUD_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OVC1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CLUD_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CLUD_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CLUD_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OVC1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CRUD_SPEED */
 
#define l_u8_rd_LI2_RR_CRUD_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_SPEED_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI2_RR_CRUD_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_SPEED_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_SPEED_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CRUD_OpDone */

 
#define l_bool_rd_LI2_RR_CRUD_OpDone() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OpDone_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_OpDone(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OpDone_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OpDone_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OpDone_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OpDone_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_STATE */

 
#define l_bool_rd_LI2_RR_CRUD_STATE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_STATE_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_STATE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_STATE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_STATE_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_STATE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_STATE_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CRUD_ActuatorState */
 
#define l_u16_rd_LI2_RR_CRUD_ActuatorState() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET + 1U] << 8U)) >> 5U) & 0x7ffU))


#define l_u16_wr_LI2_RR_CRUD_ActuatorState(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CRUD_STATUS] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET] & 0x1fU) | \
    (((A) << 5U) & 0xe0U)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI2_RR_CRUD_STATUS] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_ActuatorState_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 3U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI2_RR_CRUD_STATUS] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_ActuatorState_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CRUD_VddReset */

 
#define l_bool_rd_LI2_RR_CRUD_VddReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_VddReset_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_VddReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_VddReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_VddReset_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_VddReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_VddReset_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_Steploss */

 
#define l_bool_rd_LI2_RR_CRUD_Steploss() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_Steploss_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_Steploss(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_Steploss_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Steploss_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_Steploss_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Steploss_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_EIDef */

 
#define l_bool_rd_LI2_RR_CRUD_EIDef() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_EIDef_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_EIDef(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_EIDef_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_EIDef_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_EIDef_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_EIDef_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_TSD */

 
#define l_bool_rd_LI2_RR_CRUD_TSD() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_TSD_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_TSD(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_TSD_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_TSD_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_TSD_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_TSD_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_TW */

 
#define l_bool_rd_LI2_RR_CRUD_TW() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_TW_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_TW(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_TW_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_TW_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_TW_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_TW_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI2_RR_CRUD_Tinfo */
 
#define l_u8_rd_LI2_RR_CRUD_Tinfo() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Tinfo_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI2_RR_CRUD_Tinfo(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Tinfo_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Tinfo_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Tinfo_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI2_RR_CRUD_Sensor */

 
#define l_bool_rd_LI2_RR_CRUD_Sensor() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_Sensor_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_Sensor(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_Sensor_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_Sensor_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_Sensor_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Sensor_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_OV */

 
#define l_bool_rd_LI2_RR_CRUD_OV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_OV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OV_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_UV */

 
#define l_bool_rd_LI2_RR_CRUD_UV() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_UV_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_UV(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_UV_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_UV_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_UV_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_UV_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_OPEN2 */

 
#define l_bool_rd_LI2_RR_CRUD_OPEN2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OPEN2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_OPEN2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OPEN2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OPEN2_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OPEN2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OPEN2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_OPEN1 */

 
#define l_bool_rd_LI2_RR_CRUD_OPEN1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OPEN1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_OPEN1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OPEN1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OPEN1_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OPEN1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OPEN1_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_OVC2 */

 
#define l_bool_rd_LI2_RR_CRUD_OVC2() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OVC2_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_OVC2(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OVC2_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OVC2_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OVC2_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OVC2_FLAG_BIT_OFFSET);}
/* static access macros for signal LI2_RR_CRUD_OVC1 */

 
#define l_bool_rd_LI2_RR_CRUD_OVC1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OVC1_BIT_OFFSET))

#define l_bool_wr_LI2_RR_CRUD_OVC1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OVC1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI2_RR_CRUD_OVC1_BYTE_OFFSET], \
    LIN_LI2_RR_CRUD_OVC1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OVC1_FLAG_BIT_OFFSET);}


/* Signal flag APIs */

 
#define l_flg_tst_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_clr_LI0_EVNT_ADDr_flag() \
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

 
#define l_flg_tst_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_clr_LI0_EVNT_Broad_flag() \
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

#define l_flg_tst_LI0_EVNT_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EVNT_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EVNT_CMD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_CMD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EVNT_CMD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_CMD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Side_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Side_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI0_EVNT_Front_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLLR_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLLR_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLLR_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLLR_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLLR_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLLR_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_SLUD_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_SLUD_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_SLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_SLUD_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_FR_CLUD_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_FR_CLUD_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_FR_CLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI0_FR_CLUD_OVC1_FLAG_BIT_OFFSET)


 
#define l_flg_tst_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_clr_LI1_EVNT_ADDr_flag() \
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

 
#define l_flg_tst_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_clr_LI1_EVNT_Broad_flag() \
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

#define l_flg_tst_LI1_EVNT_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_EVNT_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_EVNT_CMD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_CMD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_EVNT_CMD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_CMD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Side_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Side_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI1_EVNT_Front_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRLR_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRLR_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRLR_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRLR_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRLR_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRLR_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_SRUD_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_SRUD_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_SRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_SRUD_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI1_FR_CRUD_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI1_FR_CRUD_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI1_FR_CRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI1_FR_CRUD_OVC1_FLAG_BIT_OFFSET)


 
#define l_flg_tst_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_clr_LI2_EVNT_ADDr_flag() \
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_ADDr_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_ADDr_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

 
#define l_flg_tst_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET)

#define l_flg_clr_LI2_EVNT_Broad_flag() \
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Broad_EVNT_MASTER_COMMAND_FLAG_BIT_OFFSET);}\
        {LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Broad_EVNT_SPECIAL_COMMAND_FLAG_BIT_OFFSET);}\

#define l_flg_tst_LI2_EVNT_REAR_LH_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_EVNT_REAR_LH_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_REAR_LH_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_REAR_RH_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_EVNT_REAR_RH_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_REAR_RH_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_CMD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_CMD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_EVNT_CMD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_CMD_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_CMD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_LH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_LH_UpDown_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_RH_LeftRight_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BYTE_OFFSET],\
         LIN_LI2_EVNT_Rear_Center_RH_UpDown_TargetPosition_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLLR_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLLR_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLLR_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRLR_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRLR_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRLR_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRLR_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CLUD_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CLUD_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CLUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CLUD_OVC1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_OpDone_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OpDone_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_OpDone_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OpDone_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OpDone_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_STATE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_STATE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_STATE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_STATE_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_STATE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_ActuatorState_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_ActuatorState_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_ActuatorState_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_ActuatorState_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_ActuatorState_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_VddReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_VddReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_VddReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_VddReset_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_VddReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_Steploss_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Steploss_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_Steploss_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Steploss_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Steploss_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_EIDef_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_EIDef_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_EIDef_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_EIDef_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_EIDef_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_TSD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_TSD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_TSD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_TSD_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_TSD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_TW_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_TW_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_TW_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_TW_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_TW_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_Tinfo_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Tinfo_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_Tinfo_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Tinfo_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Tinfo_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_Sensor_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Sensor_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_Sensor_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_Sensor_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_Sensor_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_OV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_OV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_UV_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_UV_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_UV_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_UV_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_UV_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_OPEN2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OPEN2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_OPEN2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OPEN2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OPEN2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_OPEN1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OPEN1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_OPEN1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OPEN1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OPEN1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_OVC2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OVC2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_OVC2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OVC2_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OVC2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI2_RR_CRUD_OVC1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OVC1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI2_RR_CRUD_OVC1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI2_RR_CRUD_OVC1_FLAG_BYTE_OFFSET],\
         LIN_LI2_RR_CRUD_OVC1_FLAG_BIT_OFFSET)



/* Frame flag APIs */

   /* Interface_name = LI0 */

 #define l_flg_tst_LI0_EVNT_MASTER_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EVNT_MASTER_COMMAND]
 #define l_flg_clr_LI0_EVNT_MASTER_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EVNT_MASTER_COMMAND] = 0

 #define l_flg_tst_LI0_FR_SLLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_SLLR_STATUS]
 #define l_flg_clr_LI0_FR_SLLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_SLLR_STATUS] = 0

 #define l_flg_tst_LI0_FR_SLUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_SLUD_STATUS]
 #define l_flg_clr_LI0_FR_SLUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_SLUD_STATUS] = 0

 #define l_flg_tst_LI0_FR_CLLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_CLLR_STATUS]
 #define l_flg_clr_LI0_FR_CLLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_CLLR_STATUS] = 0

 #define l_flg_tst_LI0_FR_CLUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_CLUD_STATUS]
 #define l_flg_clr_LI0_FR_CLUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_FR_CLUD_STATUS] = 0

 #define l_flg_tst_LI0_EVNT_SPECIAL_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EVNT_SPECIAL_COMMAND]
 #define l_flg_clr_LI0_EVNT_SPECIAL_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EVNT_SPECIAL_COMMAND] = 0

 #define l_flg_tst_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq]
 #define l_flg_clr_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq] = 0

 #define l_flg_tst_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp]
 #define l_flg_clr_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp] = 0

   /* Interface_name = LI1 */

 #define l_flg_tst_LI1_EVNT_MASTER_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI1_EVNT_MASTER_COMMAND]
 #define l_flg_clr_LI1_EVNT_MASTER_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI1_EVNT_MASTER_COMMAND] = 0

 #define l_flg_tst_LI1_FR_CRLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_CRLR_STATUS]
 #define l_flg_clr_LI1_FR_CRLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_CRLR_STATUS] = 0

 #define l_flg_tst_LI1_FR_CRUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_CRUD_STATUS]
 #define l_flg_clr_LI1_FR_CRUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_CRUD_STATUS] = 0

 #define l_flg_tst_LI1_FR_SRLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_SRLR_STATUS]
 #define l_flg_clr_LI1_FR_SRLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_SRLR_STATUS] = 0

 #define l_flg_tst_LI1_FR_SRUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_SRUD_STATUS]
 #define l_flg_clr_LI1_FR_SRUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI1_FR_SRUD_STATUS] = 0

 #define l_flg_tst_LI1_EVNT_SPECIAL_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI1_EVNT_SPECIAL_COMMAND]
 #define l_flg_clr_LI1_EVNT_SPECIAL_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI1_EVNT_SPECIAL_COMMAND] = 0

 #define l_flg_tst_LI1_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI1_MasterReq]
 #define l_flg_clr_LI1_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI1_MasterReq] = 0

 #define l_flg_tst_LI1_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI1_SlaveResp]
 #define l_flg_clr_LI1_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI1_SlaveResp] = 0

   /* Interface_name = LI2 */

 #define l_flg_tst_LI2_EVNT_MASTER_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI2_EVNT_MASTER_COMMAND]
 #define l_flg_clr_LI2_EVNT_MASTER_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI2_EVNT_MASTER_COMMAND] = 0

 #define l_flg_tst_LI2_RR_CLLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CLLR_STATUS]
 #define l_flg_clr_LI2_RR_CLLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CLLR_STATUS] = 0

 #define l_flg_tst_LI2_RR_CLUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CLUD_STATUS]
 #define l_flg_clr_LI2_RR_CLUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CLUD_STATUS] = 0

 #define l_flg_tst_LI2_RR_CRLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CRLR_STATUS]
 #define l_flg_clr_LI2_RR_CRLR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CRLR_STATUS] = 0

 #define l_flg_tst_LI2_RR_CRUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CRUD_STATUS]
 #define l_flg_clr_LI2_RR_CRUD_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI2_RR_CRUD_STATUS] = 0

 #define l_flg_tst_LI2_EVNT_SPECIAL_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI2_EVNT_SPECIAL_COMMAND]
 #define l_flg_clr_LI2_EVNT_SPECIAL_COMMAND_flag() \
          g_lin_frame_flag_handle_tbl[LI2_EVNT_SPECIAL_COMMAND] = 0

 #define l_flg_tst_LI2_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI2_MasterReq]
 #define l_flg_clr_LI2_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI2_MasterReq] = 0

 #define l_flg_tst_LI2_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI2_SlaveResp]
 #define l_flg_clr_LI2_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI2_SlaveResp] = 0


/* SCHEDULE MANAGEMENT */

/*FUNCTION**********************************************************************
 *
 * Function Name : l_sch_tick_interface
 * Description   : This static function call to dynamic function l_sch_tick()
 *
 * Implements    : l_sch_tick_interface_Class
 *END**************************************************************************/

#define l_sch_tick_LI0() l_sch_tick(LI0)

#define l_sch_tick_LI1() l_sch_tick(LI1)

#define l_sch_tick_LI2() l_sch_tick(LI2)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_sch_set_interface
 * Description   : This static function call to dynamic function l_sch_set()
 *
 * Implements    : l_sch_set_interface_Class
 *END**************************************************************************/

#define l_sch_set_LI0(schedule, entry) l_sch_set(LI0, schedule, entry)

#define l_sch_set_LI1(schedule, entry) l_sch_set(LI1, schedule, entry)

#define l_sch_set_LI2(schedule, entry) l_sch_set(LI2, schedule, entry)

/* INTERFACE MANAGEMENT */

/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_init_interface
 * Description   : This static function call to dynamic function l_ifc_init()
 *
 * Implements    : l_ifc_init_interface_Class
 *END**************************************************************************/

#define l_ifc_init_LI0() l_ifc_init(LI0)

#define l_ifc_init_LI1() l_ifc_init(LI1)

#define l_ifc_init_LI2() l_ifc_init(LI2)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_goto_sleep_interface
 * Description   : This static function call to dynamic function l_ifc_goto_sleep()
 *
 * Implements    : l_ifc_goto_sleep_interface_Class
 *END**************************************************************************/

#define l_ifc_goto_sleep_LI0() l_ifc_goto_sleep(LI0)

#define l_ifc_goto_sleep_LI1() l_ifc_goto_sleep(LI1)

#define l_ifc_goto_sleep_LI2() l_ifc_goto_sleep(LI2)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_wake_up_interface
 * Description   : This static function call to dynamic function l_ifc_wake_up()
 *
 * Implements    : l_ifc_wake_up_interface_Class
 *END**************************************************************************/

#define l_ifc_wake_up_LI0() l_ifc_wake_up(LI0)

#define l_ifc_wake_up_LI1() l_ifc_wake_up(LI1)

#define l_ifc_wake_up_LI2() l_ifc_wake_up(LI2)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_read_status_interface
 * Description   : This static function call to dynamic function l_ifc_read_status()
 *
 * Implements    : l_ifc_read_status_interface_Class
 *END**************************************************************************/

#define l_ifc_read_status_LI0() l_ifc_read_status(LI0)

#define l_ifc_read_status_LI1() l_ifc_read_status(LI1)

#define l_ifc_read_status_LI2() l_ifc_read_status(LI2)





#define LI0_DIAG_NUMBER_OF_SERVICES     6U

#define LI0_DIAGSRV_ASSIGN_NAD_ORDER       0U
#define LI0_DIAGSRV_READ_BY_IDENTIFIER_ORDER       1U
#define LI0_DIAGSRV_CONDITIONAL_CHANGE_NAD_ORDER       2U
#define LI0_DIAGSRV_DATA_DUMP_ORDER       3U
#define LI0_DIAGSRV_SAVE_CONFIGURATION_ORDER       4U
#define LI0_DIAGSRV_ASSIGN_FRAME_ID_RANGE_ORDER       5U

#define LI1_DIAG_NUMBER_OF_SERVICES     6U

#define LI1_DIAGSRV_ASSIGN_NAD_ORDER       0U
#define LI1_DIAGSRV_READ_BY_IDENTIFIER_ORDER       1U
#define LI1_DIAGSRV_CONDITIONAL_CHANGE_NAD_ORDER       2U
#define LI1_DIAGSRV_DATA_DUMP_ORDER       3U
#define LI1_DIAGSRV_SAVE_CONFIGURATION_ORDER       4U
#define LI1_DIAGSRV_ASSIGN_FRAME_ID_RANGE_ORDER       5U

#define LI2_DIAG_NUMBER_OF_SERVICES     6U

#define LI2_DIAGSRV_ASSIGN_NAD_ORDER       0U
#define LI2_DIAGSRV_READ_BY_IDENTIFIER_ORDER       1U
#define LI2_DIAGSRV_CONDITIONAL_CHANGE_NAD_ORDER       2U
#define LI2_DIAGSRV_DATA_DUMP_ORDER       3U
#define LI2_DIAGSRV_SAVE_CONFIGURATION_ORDER       4U
#define LI2_DIAGSRV_ASSIGN_FRAME_ID_RANGE_ORDER       5U

#define MAX_LENGTH_SERVICE 6




#endif    /* _LIN_CFG_H_ */
